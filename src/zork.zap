	.INSERT "zork_freq"
	.INSERT "zork_data"

	.FUNCT GO
START::
	CRLF
	CRLF
	PRINTI "ZORK I: The Great Underground Empire"
	CRLF
	CALL V-VERSION
	CRLF
	SET 'HERE,WEST-OF-HOUSE
	MOVE PLAYER,HERE
	CALL V-LOOK
	CALL MAIN-LOOP
	QUIT

	.FUNCT CHKWORD?,W,PS,P1=-1,F
	ZERO? W /FALSE
	GETB W,VOCAB-FL >F
	BTST F,PS \?L4
	LESS? P1,0 /TRUE
	BAND F,P1MASK >STACK
	EQUAL? STACK,P1 \?L8
	GETB W,VOCAB-V1 >F
	RETURN F
?L8:	GETB W,VOCAB-V2 >F
	RETURN F
?L4:	SET 'F,0
	RETURN F

	.FUNCT GETWORD?,N,R
	MUL N,2 >STACK
	DEC 'STACK
	GET LEXBUF,STACK >R
	RETURN R

	.FUNCT PRINT-WORD,N,I,MAX
	MUL N,4 >STACK
	INC 'STACK
	GETB LEXBUF,STACK >I
	MUL N,4 >STACK
	GETB LEXBUF,STACK >STACK
	ADD I,STACK >STACK
	SUB STACK,1 >MAX
?L1:	GETB READBUF,I >STACK
	PRINTC STACK
	IGRTR? 'I,MAX /TRUE
	PUSH 0
	JUMP ?L1

	.FUNCT CLEAR-NOUN-PHRASE,NP
	PUTB NP,0,0
	PUTB NP,1,0
	PUTB NP,6,0
	RTRUE

	.FUNCT COPY-NOUN-PHRASE,SRC,DEST,C
	GETB SRC,0 >C
	PUTB DEST,0,C
	MUL P-OBJSPEC-SIZE,C >STACK
	GET DEST,1 >STACK
	GET SRC,1 >STACK
	CALL COPY-TABLE-B,STACK,STACK,STACK
	GETB SRC,1 >C
	PUTB DEST,1,C
	MUL P-OBJSPEC-SIZE,C >STACK
	GET DEST,2 >STACK
	GET SRC,2 >STACK
	CALL COPY-TABLE-B,STACK,STACK,STACK
	GETB SRC,6 >STACK
	PUTB DEST,6,STACK
	RTRUE

	.FUNCT SAVE-PARSER-RESULT,DEST
	PUT DEST,0,P-V-WORD
	PUT DEST,1,P-P1
	PUT DEST,2,P-P2
	PUT DEST,3,P-SYNTAX
	GET DEST,4 >STACK
	CALL COPY-TABLE-B,P-PRSOS,STACK,51
	GET DEST,5 >STACK
	CALL COPY-TABLE-B,P-PRSIS,STACK,51
	PUT DEST,6,P-NUMBER
	GET DEST,8 >STACK
	CALL COPY-LEXBUF,LEXBUF,STACK
	GET DEST,7 >STACK
	CALL COPY-READBUF,READBUF,STACK
	PUT DEST,9,WINNER
	PUTB DEST,20,P-LEN
	PUTB DEST,21,P-V
	PUTB DEST,22,P-V-WORDN
	PUTB DEST,23,P-NOBJ
	ZERO? PRSO-DIR \?L2
	PUSH 0
	JUMP ?L1
?L2:	PUSH PRSO
?L1:	PUTB DEST,24,STACK
	PUTB DEST,25,PRSA
	RTRUE

	.FUNCT RESTORE-PARSER-RESULT,SRC,L,OW
	SET 'OW,WINNER
	GET SRC,0 >P-V-WORD
	GET SRC,1 >P-P1
	GET SRC,2 >P-P2
	GET SRC,3 >P-SYNTAX
	GET SRC,4 >STACK
	CALL COPY-TABLE-B,STACK,P-PRSOS,51
	GET SRC,5 >STACK
	CALL COPY-TABLE-B,STACK,P-PRSIS,51
	GET SRC,6 >P-NUMBER
	GET SRC,8 >STACK
	CALL COPY-LEXBUF,STACK,LEXBUF
	GET SRC,7 >STACK
	CALL COPY-READBUF,STACK,READBUF
	GET SRC,9 >WINNER
	GETB SRC,20 >P-LEN
	GETB SRC,21 >P-V
	GETB SRC,22 >P-V-WORDN
	GETB SRC,23 >P-NOBJ
	GETB SRC,24 >PRSO-DIR
	GETB SRC,25 >PRSA
	ZERO? PRSO-DIR /?L1
	SET 'PRSO,PRSO-DIR
	SET 'PRSO-DIR,1
	JUMP ?L6
?L1:	LESS? P-NOBJ,1 /?L4
	GETB P-PRSOS,0 >L
	ZERO? L \?L3
?L4:	SET 'PRSO,0
	JUMP ?L6
?L3:	EQUAL? L,1 \?L5
	GETB P-PRSOS,1 >PRSO
	JUMP ?L6
?L5:	SET 'PRSO,MANY-OBJECTS
?L6:	LESS? P-NOBJ,2 /?L9
	GETB P-PRSIS,0 >L
	ZERO? L \?L7
?L9:	SET 'PRSI,0
	JUMP ?L11
?L7:	EQUAL? L,1 \?L10
	GETB P-PRSIS,1 >PRSI
	JUMP ?L11
?L10:	SET 'PRSI,MANY-OBJECTS
?L11:	EQUAL? WINNER,OW,0 /FALSE
	LOC WINNER >HERE
	CALL SEARCH-FOR-LIGHT >HERE-LIT
	RETURN HERE-LIT

	.FUNCT HANDLE-ORPHAN-RESPONSE,CNT,MAX,TBL,O,OUT,NY,?TMP
	LESS? P-LEN,1 /?L3
	CALL GETWORD?,1 >STACK
	CALL STARTS-NOUN-PHRASE?,STACK >STACK
	ZERO? STACK \?L4
	CALL PARSE-NUMBER?,1 >STACK
	ZERO? STACK /?L3
?L4:	CALL PARSE-NOUN-PHRASE,1,P-NP-XOBJ,1 >?TMP
	ADD P-LEN,1 >STACK
	EQUAL? ?TMP,STACK /?L1
?L3:	RETURN O-RES-NOT-HANDLED
?L1:	EQUAL? PRSA,V?TELL \?L6
	SET 'P-CONT,P-O-CONT
	ZERO? P-CONT /?L6
	SET 'READBUF,CONT-READBUF
	SET 'LEXBUF,CONT-LEXBUF
?L6:	BTST P-O-REASON,P-OF-MISSING \?L11
	BTST P-O-REASON,P-OF-PRSI \?L13
	PUSH P-NP-IOBJ
	JUMP ?L15
?L13:	PUSH P-NP-DOBJ
?L15:	CALL COPY-NOUN-PHRASE,P-NP-XOBJ,STACK
	RETURN O-RES-SET-NP
?L11:	BTST P-O-REASON,P-OF-PRSI \?L17
	SET 'TBL,P-PRSIS
	JUMP ?L19
?L17:	SET 'TBL,P-PRSOS
?L19:	GETB TBL,0 >MAX
	SET 'CNT,0
	SET 'OUT,P-XOBJS
	GETB P-NP-XOBJ,0 >NY
	SET '?TMP,1
?L20:	GETB TBL,?TMP >O
	ZERO? NY /?L25
	GETB P-NP-XOBJ,0 >STACK
	GET P-NP-XOBJ,1 >STACK
	CALL ANY-SPEC-REFERS?,STACK,STACK,O >STACK
	ZERO? STACK /?L23
?L25:	GETB P-NP-XOBJ,1 >STACK
	GET P-NP-XOBJ,2 >STACK
	CALL ANY-SPEC-REFERS?,STACK,STACK,O >STACK
	ZERO? STACK \?L23
	INC 'CNT
	PUTB OUT,CNT,O
?L23:	IGRTR? '?TMP,MAX \?L20
	PUTB OUT,0,CNT
	ZERO? CNT \?L27
	SET 'O,0
	JUMP ?L31
?L27:	EQUAL? CNT,1 \?L29
	GETB OUT,1 >O
	JUMP ?L31
?L29:	GETB P-NP-XOBJ,6 >STACK
	EQUAL? STACK,MCM-ANY \?L30
	RANDOM CNT >STACK
	GETB OUT,STACK >O
	PUTB OUT,1,O
	PUTB OUT,0,1
	SET 'CNT,1
	PRINTI "["
	CALL PRINT-DEF,O
	PRINTI "]"
	CRLF
	JUMP ?L31
?L30:	SET 'O,MANY-OBJECTS
?L31:	BTST P-O-REASON,P-OF-PRSI \?L32
	SET 'P-PRSIS,P-XOBJS
	SET 'PRSI,O
	JUMP ?L34
?L32:	SET 'P-PRSOS,P-XOBJS
	SET 'PRSO,O
?L34:	SET 'P-XOBJS,TBL
	ZERO? CNT \?L35
	PRINTI "That wasn't an option."
	PRINT TRY-REPHRASING-CMD
	CRLF
	SET 'P-CONT,0
	RETURN O-RES-FAILED
?L35:	EQUAL? CNT,1 /?L38
	GETB P-NP-XOBJ,6 >STACK
	EQUAL? STACK,MCM-ALL \?L37
?L38:	RETURN O-RES-SET-PRSTBL
?L37:	LESS? CNT,MAX \?L39
	PRINTI "That narrowed it down a little. "
	CALL WHICH-DO-YOU-MEAN,OUT
	RETURN O-RES-REORPHANED
?L39:	PRINTI "That didn't narrow it down at all."
	PRINT TRY-REPHRASING-CMD
	CRLF
	SET 'P-CONT,0
	RETURN O-RES-FAILED

	.FUNCT REFERS-PSEUDO?,SPEC,PDO,NA,NN,AT,NT,A,N
	GET SPEC,0 >A
	GET SPEC,1 >N
	GETB PDO,0 >NA
	GETB PDO,1 >NN
	GET PDO,1 >AT
	GET PDO,2 >NT
	ZERO? A /?L1
	ZERO? N /?L10
	EQUAL? NA,1 \?L29
	EQUAL? A,AT /?L5
	EQUAL? NA,1 /FALSE
?L29:	CALL IN-BTBL?,AT,NA,A >STACK
	ZERO? STACK /FALSE
?L5:	EQUAL? NN,1 \?L30
	EQUAL? N,NT /?L7
	EQUAL? NN,1 /FALSE
?L30:	CALL IN-WTBL?,NT,NN,N >STACK
	ZERO? STACK /FALSE
?L7:	RETURN 3
?L1:	ZERO? N /?L10
	EQUAL? NN,1 \?L31
	EQUAL? N,NT /?L13
	EQUAL? NN,1 /?L11
?L31:	CALL IN-WTBL?,NT,NN,N >STACK
	ZERO? STACK /?L11
?L13:	RETURN 2
?L11:	CALL CHKWORD?,N,PS?ADJECTIVE,P1?ADJECTIVE >A
	PUSH A
	ZERO? STACK /FALSE
	EQUAL? NA,1 \?L32
	EQUAL? A,AT /TRUE
	EQUAL? NA,1 /FALSE
?L32:	CALL IN-BTBL?,AT,NA,A >STACK
	ZERO? STACK /FALSE
	RTRUE
?L10:	ZERO? A /FALSE
	EQUAL? NA,1 \?L33
	EQUAL? A,AT /TRUE
	EQUAL? NA,1 /FALSE
?L33:	CALL IN-BTBL?,AT,NA,A >STACK
	ZERO? STACK /FALSE
	RTRUE

	.FUNCT MATCH-PSEUDO,SPEC,PT,CNT
	GET PT,0 >CNT
	ADD PT,2 >PT
?L1:	DLESS? 'CNT,0 /FALSE
	CALL REFERS-PSEUDO?,SPEC,PT >STACK
	ZERO? STACK /?L5
	RETURN PT
?L5:	ADD PT,PDO-SIZE >PT
	PUSH PT
	JUMP ?L1

	.FUNCT MAKE-PSEUDO,PDO
	GET PDO,3 >STACK
	PUTP PSEUDO-OBJECT,P?ACTION,STACK
	SET 'PSEUDO-LOC,HERE
	RETURN PSEUDO-OBJECT

	.FUNCT THIS-IS-IT,O
	PUTB P-XOBJS,0,1
	PUTB P-XOBJS,1,O
	CALL SET-PRONOUNS,O,P-XOBJS >STACK
	RSTACK

	.FUNCT CONTENTS-ARE-IT,CTNR,FILTER,N,I
	FIRST? CTNR >I \?L3
?L1:	ZERO? FILTER /?L6
	CALL FILTER,I >STACK
	ZERO? STACK /?L7
?L6:	INC 'N
	PUTB P-XOBJS,N,I
	EQUAL? N,P-MAX-OBJECTS /?L3
?L7:	NEXT? I >I /?L1
?L3:	PUTB P-XOBJS,0,N
	ZERO? N /TRUE
	EQUAL? N,1 \?L13
	GETB P-XOBJS,1 >N
	JUMP ?L14
?L13:	SET 'N,MANY-OBJECTS
?L14:	CALL SET-PRONOUNS,N,P-XOBJS >STACK
	RSTACK

	.FUNCT PRO-TRY-SET-IT,X,PRO?OBJS
	EQUAL? X,WINNER,MANY-OBJECTS /FALSE
	FSET? X,PERSONBIT /FALSE
	FSET? X,PLURALBIT /FALSE
	CALL PRO-FORCE-SET-IT,PRO?OBJS >STACK
	RSTACK

	.FUNCT PRO-FORCE-SET-IT,PRO?OBJS
	CALL COPY-TABLE-B,PRO?OBJS,P-PRO-IT-OBJS,51
	RTRUE

	.FUNCT PRO-TRY-SET-THEM,X,PRO?OBJS
	EQUAL? X,WINNER /FALSE
	EQUAL? X,MANY-OBJECTS /?L3
	FSET? X,PLURALBIT \FALSE
?L3:	CALL PRO-FORCE-SET-THEM,PRO?OBJS >STACK
	RSTACK

	.FUNCT PRO-FORCE-SET-THEM,PRO?OBJS
	CALL COPY-TABLE-B,PRO?OBJS,P-PRO-THEM-OBJS,51
	RTRUE

	.FUNCT PRO-TRY-SET-HIM,X,PRO?OBJS
	EQUAL? X,WINNER /FALSE
	FSET? X,PERSONBIT \FALSE
	FSET? X,FEMALEBIT /FALSE
	FSET? X,PLURALBIT /FALSE
	CALL PRO-FORCE-SET-HIM,PRO?OBJS >STACK
	RSTACK

	.FUNCT PRO-FORCE-SET-HIM,PRO?OBJS
	CALL COPY-TABLE-B,PRO?OBJS,P-PRO-HIM-OBJS,51
	RTRUE

	.FUNCT PRO-TRY-SET-HER,X,PRO?OBJS
	EQUAL? X,WINNER /FALSE
	FSET? X,PERSONBIT \FALSE
	FSET? X,FEMALEBIT \FALSE
	FSET? X,PLURALBIT /FALSE
	CALL PRO-FORCE-SET-HER,PRO?OBJS >STACK
	RSTACK

	.FUNCT PRO-FORCE-SET-HER,PRO?OBJS
	CALL COPY-TABLE-B,PRO?OBJS,P-PRO-HER-OBJS,51
	RTRUE

	.FUNCT SET-PRONOUNS,O,OBJS,PT,MAX,I
	EQUAL? O,0,ROOMS /FALSE
	GETPT O,P?PRONOUN >PT
	ZERO? PT /?L3
	PTSIZE PT >STACK
	DIV STACK,2 >STACK
	SUB STACK,1 >MAX
	SET 'I,0
?L4:	GET PT,I >STACK
	CALL STACK,OBJS >STACK
	IGRTR? 'I,MAX \?L4
	RTRUE
?L3:	CALL PRO-TRY-SET-IT,O,OBJS
	CALL PRO-TRY-SET-THEM,O,OBJS
	CALL PRO-TRY-SET-HIM,O,OBJS
	CALL PRO-TRY-SET-HER,O,OBJS >STACK
	RSTACK

	.FUNCT EXPAND-PRONOUN,W,OBJS,CNT
	EQUAL? W,W?IT \?L1
	CALL COPY-TABLE-B,P-PRO-IT-OBJS,OBJS,51
	JUMP ?L6
?L1:	EQUAL? W,W?THEM \?L3
	CALL COPY-TABLE-B,P-PRO-THEM-OBJS,OBJS,51
	JUMP ?L6
?L3:	EQUAL? W,W?HIM \?L4
	CALL COPY-TABLE-B,P-PRO-HIM-OBJS,OBJS,51
	JUMP ?L6
?L4:	EQUAL? W,W?HER \FALSE
	CALL COPY-TABLE-B,P-PRO-HER-OBJS,OBJS,51
?L6:	GETB OBJS,0 >CNT
	ZERO? CNT \?L7
	PRINTI "You haven't seen any """
	PRINTB W
	PRINTI """ yet."
	CRLF
	RETURN EXPAND-PRONOUN-FAILED
?L7:	CALL STILL-VISIBLE-CHECK,OBJS >STACK
	ZERO? STACK \?L10
	RETURN EXPAND-PRONOUN-FAILED
?L10:	EQUAL? CNT,1 \?L13
	GETB OBJS,1 >STACK
	RSTACK
?L13:	RETURN MANY-OBJECTS

	.FUNCT V-PRONOUNS
	PRINTI "IT means "
	CALL LIST-OBJECTS,P-PRO-IT-OBJS,0,152
	PRINTI "."
	CRLF
	PRINTI "THEM means "
	CALL LIST-OBJECTS,P-PRO-THEM-OBJS,0,152
	PRINTI "."
	CRLF
	PRINTI "HIM means "
	CALL LIST-OBJECTS,P-PRO-HIM-OBJS,0,152
	PRINTI "."
	CRLF
	PRINTI "HER means "
	CALL LIST-OBJECTS,P-PRO-HER-OBJS,0,152
	PRINTR "."

	.FUNCT MAIN-LOOP,RESULT
?L1:	CALL PARSER >RESULT
	PUSH RESULT
	ZERO? STACK /?L3
	CALL PERFORM,PRSA,PRSO,PRSI >RESULT
	EQUAL? PRSA,V?QUIT,V?VERSION,V?WAIT /?L7
	EQUAL? PRSA,V?SAVE,V?RESTORE,V?INVENTORY /?L7
	EQUAL? PRSA,V?UNDO,V?SUPERBRIEF,V?BRIEF /?L7
	EQUAL? PRSA,V?VERBOSE,V?AGAIN,V?SCRIPT /?L7
	EQUAL? PRSA,V?UNSCRIPT,V?PRONOUNS,V?TELL /?L7
	GETP HERE,P?ACTION >STACK
	CALL STACK,M-END >RESULT
	CALL CLOCKER >RESULT
?L7:	LOC WINNER >HERE
?L3:	PUSH 0
	JUMP ?L1

	.FUNCT PARSER,NOBJ,VAL,DIR,DIR-WN,O-R,KEEP,OW,OH,OHL,I,W,V
	SET 'OW,WINNER
	SET 'OH,HERE
	SET 'OHL,HERE-LIT
	SET 'NOBJ,0
	SET 'VAL,0
	SET 'DIR,0
	SET 'DIR-WN,0
	LESS? P-CONT,0 \?L1
	SET 'P-CONT,0
?L1:	ZERO? P-CONT /?L4
	SET 'READBUF,CONT-READBUF
	SET 'LEXBUF,CONT-LEXBUF
	EQUAL? P-CONT,1 \?L8
	SET 'P-CONT,0
	JUMP ?L15
?L8:	EQUAL? MODE,SUPERBRIEF /?L15
	EQUAL? PRSA,V?TELL /?L15
	CRLF
	JUMP ?L15
?L4:	SET 'WINNER,PLAYER
	LOC WINNER >HERE
	CALL SEARCH-FOR-LIGHT >HERE-LIT
	CALL READLINE,1
?L15:	GETB LEXBUF,1 >P-LEN
	ZERO? P-LEN \?L16
	PRINTI "..."
	CRLF
	SET 'P-CONT,0
	RFALSE
?L16:	ZERO? P-CONT \?L29
	ZERO? P-LEN /?L29
	CALL GETWORD?,1 >STACK
	EQUAL? STACK,W?OOPS \?L29
	EQUAL? P-LEN,2 \?L23
	GETB P-OOPS-DATA,4 >STACK
	ZERO? STACK /?L25
	CALL HANDLE-OOPS,2
	GETB LEXBUF,1 >P-LEN
	JUMP ?L29
?L25:	PRINTI "Nothing to correct."
	CRLF
	RFALSE
?L23:	EQUAL? P-LEN,1 \?L28
	PRINTI "It's OK."
	CRLF
	RFALSE
?L28:	PRINTI "You can only correct one word at a time."
	CRLF
	RFALSE
?L29:	SET 'KEEP,0
	PUTB P-OOPS-DATA,4,0
	PUTB P-OOPS-DATA,5,0
	PUT P-OOPS-DATA,0,P-O-REASON
	ZERO? P-CONT \?L61
	EQUAL? READBUF,EDIT-READBUF /?L34
	CALL COPY-READBUF,READBUF,EDIT-READBUF
	CALL COPY-LEXBUF,LEXBUF,EDIT-LEXBUF
	SET 'READBUF,EDIT-READBUF
	SET 'LEXBUF,EDIT-LEXBUF
?L34:	ZERO? P-O-REASON /?L41
	CALL HANDLE-ORPHAN-RESPONSE >O-R
	EQUAL? O-R,O-RES-NOT-HANDLED /?L43
	SET 'WINNER,OW
	SET 'HERE,OH
	SET 'HERE-LIT,OHL
?L43:	EQUAL? O-R,O-RES-REORPHANED /FALSE
	EQUAL? O-R,O-RES-FAILED \?L48
	SET 'P-O-REASON,0
	RFALSE
?L48:	EQUAL? O-R,O-RES-SET-NP \?L49
	GETB P-SYNTAX,SYN-PREP1 >P-P1
	BTST P-O-REASON,P-OF-PRSI \?L50
	GETB P-SYNTAX,SYN-PREP2 >P-P2
	SET 'P-NOBJ,2
	SET 'KEEP,1
	JUMP ?L56
?L50:	SET 'P-NOBJ,1
	JUMP ?L56
?L49:	EQUAL? O-R,O-RES-SET-PRSTBL \?L56
	BTST P-O-REASON,P-OF-PRSI \?L54
	SET 'KEEP,2
	JUMP ?L56
?L54:	SET 'KEEP,1
?L56:	SET 'P-O-REASON,0
?L41:	ZERO? O-R \?L61
	CALL CONVERT-ORDER-TO-TELL? >STACK
	ZERO? STACK /?L61
	GETB LEXBUF,1 >P-LEN
?L61:	EQUAL? O-R,O-RES-SET-NP,O-RES-SET-PRSTBL /?L66
	SET 'P-V,0
	SET 'P-NOBJ,0
	CALL CLEAR-NOUN-PHRASE,P-NP-DOBJ
	CALL CLEAR-NOUN-PHRASE,P-NP-IOBJ
	SET 'P-P1,0
	SET 'P-P2,0
	SET 'I,P-CONT
	ZERO? I \?L68
	SET 'I,1
?L68:	GRTR? I,P-LEN \?L72
	SET 'P-CONT,0
	JUMP ?L71
?L72:	CALL GETWORD?,I >W
	ZERO? W \?L74
	CALL PARSE-NUMBER?,I >STACK
	ZERO? STACK /?L75
	SET 'W,W?$002cNUMBER
	ZERO? W \?L74
?L75:	CALL STORE-OOPS,I
	SET 'P-CONT,0
	PRINTI "I don't know the word """
	CALL PRINT-WORD,I
	PRINTI """."
	CRLF
	RFALSE
?L74:	EQUAL? W,W?THEN,W?$PERIOD \?L76
	ADD I,1 >P-CONT
	GRTR? P-CONT,P-LEN \?L77
	SET 'P-CONT,0
	JUMP ?L71
?L77:	CALL COPY-READBUF,READBUF,CONT-READBUF
	CALL COPY-LEXBUF,LEXBUF,CONT-LEXBUF
	JUMP ?L71
?L76:	ZERO? P-V \?L82
	CALL CHKWORD?,W,PS?VERB,P1?VERB >V
	ZERO? V /?L82
	ZERO? DIR /?L83
	EQUAL? V,ACT?WALK \?L82
?L83:	SET 'P-V-WORD,W
	SET 'P-V-WORDN,I
	SET 'P-V,V
	JUMP ?L98
?L82:	ZERO? DIR \?L84
	EQUAL? P-V,0,ACT?WALK \?L84
	CALL CHKWORD?,W,PS?DIRECTION,P1?DIRECTION >VAL
	ZERO? VAL /?L84
	SET 'DIR,VAL
	SET 'DIR-WN,I
	JUMP ?L98
?L84:	CALL CHKWORD?,W,PS?PREPOSITION,0 >VAL
	ZERO? VAL /?L85
	ZERO? NOBJ \?L86
	ZERO? P-P1 \?L86
	SET 'P-P1,VAL
	JUMP ?L98
?L86:	EQUAL? NOBJ,1 \?L98
	ZERO? P-P2 \?L98
	SET 'P-P2,VAL
	JUMP ?L98
?L85:	CALL STARTS-NOUN-PHRASE?,W >STACK
	ZERO? STACK /?L90
	INC 'NOBJ
	EQUAL? NOBJ,1 \?L91
	CALL PARSE-NOUN-PHRASE,I,P-NP-DOBJ >VAL
	JUMP ?L94
?L91:	EQUAL? NOBJ,2 \?L93
	CALL PARSE-NOUN-PHRASE,I,P-NP-IOBJ >VAL
	JUMP ?L94
?L93:	SET 'P-CONT,0
	PRINTI "That sentence has too many objects."
	CRLF
	RFALSE
?L94:	ZERO? VAL /?L95
	SET 'I,VAL
	JUMP ?L68
?L95:	SET 'P-CONT,0
	RFALSE
?L90:	CALL STORE-OOPS,I
	SET 'P-CONT,0
	PRINTI "I didn't expect the word """
	CALL PRINT-WORD,I
	PRINTI """ there."
	CRLF
	RFALSE
?L98:	INC 'I
	JUMP ?L68
?L71:	SET 'P-NOBJ,NOBJ
	ZERO? DIR /?L99
	EQUAL? P-V,0,ACT?WALK \?L99
	ZERO? NOBJ \?L99
	ZERO? P-P1 \?L99
	ZERO? P-P2 \?L99
	SET 'PRSO-DIR,1
	SET 'PRSA,V?WALK
	SET 'PRSO,DIR
	SET 'PRSI,0
	EQUAL? PRSA,V?AGAIN /TRUE
	CALL SAVE-PARSER-RESULT,AGAIN-STORAGE
	RTRUE
?L99:	ZERO? P-V \?L105
	SET 'P-CONT,0
	PRINTI "That sentence has no verb."
	CRLF
	RFALSE
?L105:	ZERO? DIR /?L107
	CALL STORE-OOPS,DIR-WN
	SET 'P-CONT,0
	PRINTI "I don't understand what """
	CALL PRINT-WORD,DIR-WN
	PRINTI """ is doing in that sentence."
	CRLF
	RFALSE
?L107:	SET 'PRSO-DIR,0
?L66:	ZERO? O-R \?L110
	CALL MATCH-SYNTAX >STACK
	ZERO? STACK /?L114
	CALL FIND-OBJECTS,KEEP >STACK
	ZERO? STACK \?L117
?L114:	SET 'P-CONT,0
	RFALSE
?L110:	LESS? KEEP,2 \?L117
	CALL FIND-OBJECTS,KEEP >STACK
	ZERO? STACK \?L117
	SET 'P-CONT,0
	RFALSE
?L117:	EQUAL? PRSA,V?AGAIN /?L121
	CALL SAVE-PARSER-RESULT,AGAIN-STORAGE
?L121:	CALL SET-PRONOUNS,PRSO,P-PRSOS
	RTRUE

	.FUNCT STORE-OOPS,WN
	EQUAL? LEXBUF,EDIT-LEXBUF /?L1
	CALL COPY-READBUF,READBUF,EDIT-READBUF
	CALL COPY-LEXBUF,LEXBUF,EDIT-LEXBUF
?L1:	PUTB P-OOPS-DATA,5,P-CONT
	PUT P-OOPS-DATA,1,WINNER
	PUTB P-OOPS-DATA,4,WN
	RTRUE

	.FUNCT HANDLE-OOPS,N,W,WN,SS,SL,DS,DL,BL,MAX,DELTA,LBUF=EDIT-LEXBUF,RBUF=EDIT-READBUF,I
	CALL GETWORD?,N >W
	GETB P-OOPS-DATA,4 >WN
	MUL WN,2 >STACK
	DEC 'STACK
	PUT LBUF,STACK,W
	MUL N,4 >STACK
	INC 'STACK
	GETB LEXBUF,STACK >SS
	MUL N,4 >STACK
	GETB LEXBUF,STACK >SL
	MUL WN,4 >STACK
	INC 'STACK
	GETB LBUF,STACK >DS
	MUL WN,4 >STACK
	GETB LBUF,STACK >DL
	MUL WN,4 >STACK
	PUTB LBUF,STACK,SL
	LESS? SL,DL \?L1
	ADD RBUF,DS >STACK
	ADD READBUF,SS >STACK
	CALL COPY-TABLE-B,STACK,STACK,SL
	ADD DS,DL >STACK
	SUB STACK,1 >MAX
	ADD SL,1 >I
?L3:	PUTB RBUF,I,32
	IGRTR? 'I,MAX \?L3
	JUMP ?L17
?L1:	GRTR? SL,DL \?L17
	CALL READBUF-LENGTH,RBUF >BL
	INC 'BL
	SUB SL,DL >DELTA
	ADD BL,DELTA >STACK
	LESS? STACK,READBUF-SIZE /?L7
	SUB READBUF-SIZE,DELTA >STACK
	SUB STACK,1 >BL
?L7:	SET 'I,BL
?L10:	GETB RBUF,I >STACK
	ADD I,DELTA >STACK
	PUTB RBUF,STACK,STACK
	DLESS? 'I,DS \?L10
	ADD RBUF,DS >STACK
	ADD READBUF,SS >STACK
	CALL COPY-TABLE-B,STACK,STACK,SL
	GETB LBUF,1 >MAX
	LESS? N,MAX \?L17
	ADD N,1 >I
?L15:	MUL I,4 >STACK
	INC 'STACK
	GETB LBUF,STACK >STACK
	ADD STACK,DELTA >STACK
	MUL I,4 >STACK
	INC 'STACK
	PUTB LBUF,STACK,STACK
	IGRTR? 'I,MAX \?L15
?L17:	SET 'READBUF,RBUF
	SET 'LEXBUF,LBUF
	GET P-OOPS-DATA,0 >P-O-REASON
	GETB P-OOPS-DATA,5 >P-CONT
	GET P-OOPS-DATA,1 >WINNER
	PUTB P-OOPS-DATA,4,0
	PUTB P-OOPS-DATA,5,0
	PUT P-OOPS-DATA,0,0
	RTRUE

	.FUNCT REPLACE-HELD-WORD,N,NEW-WORD,S,OL,NL,BL,MAX,DELTA,LBUF=EDIT-LEXBUF,RBUF=EDIT-READBUF,I
	MUL N,2 >STACK
	DEC 'STACK
	PUT LBUF,STACK,NEW-WORD
	DIROUT 3,TEMPTABLE
	PRINTB NEW-WORD
	DIROUT -3
	MUL N,4 >STACK
	INC 'STACK
	GETB LBUF,STACK >S
	MUL N,4 >STACK
	GETB LBUF,STACK >OL
	GET TEMPTABLE,0 >NL
	MUL N,4 >STACK
	PUTB LBUF,STACK,NL
	LESS? NL,OL \?L1
	ADD S,OL >STACK
	SUB STACK,1 >MAX
	ADD S,NL >STACK
	ADD STACK,1 >I
?L3:	PUTB RBUF,I,32
	IGRTR? 'I,MAX \?L3
	JUMP ?L17
?L1:	GRTR? NL,OL \?L17
	CALL READBUF-LENGTH,RBUF >BL
	INC 'BL
	SUB NL,OL >DELTA
	ADD BL,DELTA >STACK
	LESS? STACK,READBUF-SIZE /?L7
	SUB READBUF-SIZE,DELTA >STACK
	SUB STACK,1 >BL
?L7:	SET 'I,BL
?L10:	GETB RBUF,I >STACK
	ADD I,DELTA >STACK
	PUTB RBUF,STACK,STACK
	DLESS? 'I,S \?L10
	GETB LBUF,1 >MAX
	LESS? N,MAX \?L17
	ADD N,1 >I
?L15:	MUL I,4 >STACK
	INC 'STACK
	GETB LBUF,STACK >STACK
	ADD STACK,DELTA >STACK
	MUL I,4 >STACK
	INC 'STACK
	PUTB LBUF,STACK,STACK
	IGRTR? 'I,MAX \?L15
?L17:	ADD RBUF,S >STACK
	ADD TEMPTABLE,2 >STACK
	CALL COPY-TABLE-B,STACK,STACK,NL
	RTRUE

	.FUNCT INSERT-HELD-WORD,N,NEW-WORD,LBUF=EDIT-LEXBUF,RBUF=EDIT-READBUF,LEN,MIN,BL,S,MAX,NL,DELTA,I
	GETB LBUF,1 >LEN
	LESS? N,1 \?L1
	SET 'N,1
	JUMP ?L3
?L1:	GRTR? N,LEN \?L3
	ADD LEN,1 >N
?L3:	DIROUT 3,TEMPTABLE
	PRINTB NEW-WORD
	DIROUT -3
	GET TEMPTABLE,0 >NL
	EQUAL? LEN,LEXBUF-SIZE \?L5
	SET 'LEN,58
?L5:	GRTR? N,LEN /?L35
	MUL N,2 >MIN
	MUL LEN,2 >I
?L10:	GET LBUF,I >STACK
	ADD I,2 >STACK
	PUT LBUF,STACK,STACK
	SUB I,1 >STACK
	GET LBUF,STACK >STACK
	ADD I,1 >STACK
	PUT LBUF,STACK,STACK
	SUB I,2 >I
	LESS? I,MIN \?L10
	GRTR? N,LEN \?L14
?L35:	CALL READBUF-LENGTH,RBUF >STACK
	ADD STACK,1 >S
	JUMP ?L16
?L14:	MUL N,4 >STACK
	INC 'STACK
	GETB LBUF,STACK >S
?L16:	MUL N,2 >STACK
	DEC 'STACK
	PUT LBUF,STACK,NEW-WORD
	MUL N,4 >STACK
	PUTB LBUF,STACK,NL
	MUL N,4 >STACK
	INC 'STACK
	PUTB LBUF,STACK,S
	ADD LEN,1 >STACK
	PUTB LBUF,1,STACK
	GRTR? N,LEN /?L29
	CALL READBUF-LENGTH,RBUF >BL
	ADD NL,1 >DELTA
	INC 'BL
	ADD BL,DELTA >STACK
	LESS? STACK,READBUF-SIZE /?L19
	SUB READBUF-SIZE,DELTA >STACK
	SUB STACK,1 >BL
?L19:	SET 'I,BL
?L22:	GETB RBUF,I >STACK
	ADD I,DELTA >STACK
	PUTB RBUF,STACK,STACK
	DLESS? 'I,S \?L22
	ADD LEN,1 >MAX
	LESS? N,MAX \?L29
	ADD N,1 >I
?L27:	MUL I,4 >STACK
	INC 'STACK
	GETB LBUF,STACK >STACK
	ADD STACK,DELTA >STACK
	MUL I,4 >STACK
	INC 'STACK
	PUTB LBUF,STACK,STACK
	IGRTR? 'I,MAX \?L27
?L29:	ADD RBUF,S >STACK
	ADD TEMPTABLE,2 >STACK
	CALL COPY-TABLE-B,STACK,STACK,NL
	GRTR? N,LEN \?L32
	SUB S,1 >STACK
	JUMP ?L34
?L32:	ADD S,NL >STACK
?L34:	PUTB RBUF,STACK,32
	RTRUE

	.FUNCT CONVERT-ORDER-TO-TELL?,P,W
	LESS? P-LEN,2 /FALSE
	CALL GETWORD?,1 >STACK
	CALL STARTS-NOUN-PHRASE?,STACK >STACK
	ZERO? STACK /?L3
	CALL PARSE-NOUN-PHRASE,1,P-NP-XOBJ,1 >P
	ZERO? P /?L3
	LESS? P,P-LEN \?L3
	CALL GETWORD?,P >STACK
	EQUAL? STACK,W?$COMMA \?L3
	ADD P,1 >STACK
	CALL GETWORD?,STACK >W
	CALL CHKWORD?,W,PS?VERB >STACK
	ZERO? STACK \?L4
	CALL CHKWORD?,W,PS?DIRECTION >STACK
	ZERO? STACK /?L3
?L4:	CALL REPLACE-HELD-WORD,P,W?$PERIOD
	CALL INSERT-HELD-WORD,1,W?$002cTELL
	RTRUE
?L3:	CALL GETWORD?,1 >STACK
	EQUAL? STACK,W?TELL \FALSE
	CALL PARSE-NOUN-PHRASE,2,P-NP-XOBJ,1 >P
	ZERO? P /FALSE
	LESS? P,P-LEN \FALSE
	CALL GETWORD?,P >STACK
	EQUAL? STACK,W?TO \FALSE
	ADD P,1 >STACK
	CALL GETWORD?,STACK >W
	CALL CHKWORD?,W,PS?VERB >STACK
	ZERO? STACK \?L6
	CALL CHKWORD?,W,PS?DIRECTION >STACK
	ZERO? STACK /FALSE
?L6:	CALL REPLACE-HELD-WORD,P,W?$PERIOD
	CALL REPLACE-HELD-WORD,1,W?$002cTELL
	RTRUE

	.FUNCT NUMBER-F
	EQUAL? PRSA,V?EXAMINE \?L1
	PRINTN P-NUMBER
	PRINTI " is "
	ZERO? P-NUMBER \?L3
	PRINTI "zilch"
	JUMP ?L25
?L3:	EQUAL? P-NUMBER,1 \?L5
	PRINTI "the loneliest number that you'll ever do"
	JUMP ?L25
?L5:	EQUAL? P-NUMBER,2 \?L6
	PRINTI "the loneliest number since the number 1"
	JUMP ?L25
?L6:	EQUAL? P-NUMBER,3 \?L7
	PRINTI "a magic number"
	JUMP ?L25
?L7:	EQUAL? P-NUMBER,4 \?L8
	PRINTI "the only number that has the same number of characters as its value when written out in English"
	JUMP ?L25
?L8:	EQUAL? P-NUMBER,5 \?L9
	PRINTI "the only number that's part of more than one pair of twin primes"
	JUMP ?L25
?L9:	EQUAL? P-NUMBER,6 \?L10
	PRINTI "the smallest perfect number"
	JUMP ?L25
?L10:	EQUAL? P-NUMBER,7 \?L11
	PRINTI "a 1995 film directed by David Fincher"
	JUMP ?L25
?L11:	EQUAL? P-NUMBER,8 \?L12
	PRINTI "the first number that's neither prime nor semiprime"
	JUMP ?L25
?L12:	EQUAL? P-NUMBER,9 \?L13
	PRINTI "a 2009 animated film written and directed by Shane Acker"
	JUMP ?L25
?L13:	EQUAL? P-NUMBER,10 \?L14
	PRINTI "a 1979 film written, produced, and directed by Blake Edwards"
	JUMP ?L25
?L14:	EQUAL? P-NUMBER,42 \?L15
	PRINTI "the Answer to the Ultimate Question of Life, The Universe, and Everything"
	JUMP ?L25
?L15:	EQUAL? P-NUMBER,1729 \?L16
	PRINTI "a very interesting number; it is the smallest number expressible as the sum of two cubes in two different ways"
	JUMP ?L25
?L16:	EQUAL? P-NUMBER,12345 \?L17
	PRINTI "the combination on my luggage"
	JUMP ?L25
?L17:	EQUAL? P-NUMBER,-32768,32767 \?L18
	PRINTI "the "
	LESS? P-NUMBER,0 \?L19
	PRINTI "min"
	JUMP ?L21
?L19:	PRINTI "max"
?L21:	PRINTI "imum 16-bit signed integer"
	JUMP ?L25
?L18:	PRINTI "the number between "
	GRTR? P-NUMBER,0 \?L23
	SUB P-NUMBER,1 >STACK
	PRINTN STACK
	PRINTI " and "
	ADD P-NUMBER,1 >STACK
	PRINTN STACK
	JUMP ?L25
?L23:	ADD P-NUMBER,1 >STACK
	PRINTN STACK
	PRINTI " and "
	SUB P-NUMBER,1 >STACK
	PRINTN STACK
?L25:	PRINTR ", but that's not important right now."
?L1:	EQUAL? P-V-WORD,W?TAKE \FALSE
	EQUAL? P-NUMBER,5,10 \FALSE
	CALL PERFORM,V?WAIT >STACK
	RSTACK

	.FUNCT PARSE-NUMBER?,WN,I,MAX,V,C,NEG
	MUL WN,4 >STACK
	INC 'STACK
	GETB LEXBUF,STACK >I
	MUL WN,4 >STACK
	GETB LEXBUF,STACK >STACK
	ADD I,STACK >STACK
	SUB STACK,1 >MAX
	ZERO? MAX /FALSE
	GETB READBUF,I >C
	EQUAL? C,45 \?L4
	SET 'NEG,1
	IGRTR? 'I,MAX /FALSE
	GETB READBUF,I >C
?L4:	LESS? C,48 /FALSE
	GRTR? C,57 /FALSE
	EQUAL? V,3276 \?L13
	EQUAL? C,56 \?L13
	ZERO? NEG /?L13
	EQUAL? I,MAX \?L13
	SET 'V,-32768
	JUMP ?L24
?L13:	LESS? V,3276 /?L16
	GRTR? V,3276 /FALSE
	GRTR? C,55 /FALSE
?L16:	SUB C,48 >STACK
	MUL V,10 >STACK
	ADD STACK,STACK >V
	IGRTR? 'I,MAX /?L21
	GETB READBUF,I >C
	JUMP ?L4
?L21:	ZERO? NEG /?L24
	SUB 0,V >V
?L24:	SET 'P-NUMBER,V
	MUL I,2 >STACK
	DEC 'STACK
	PUT LEXBUF,STACK,W?$002cNUMBER
	RETURN NUMBER

	.FUNCT COPY-TABLE,SRC,DEST,LEN,I
	DEC 'LEN
	SET 'I,0
?L1:	GET SRC,I >STACK
	PUT DEST,I,STACK
	IGRTR? 'I,LEN \?L1
	RTRUE

	.FUNCT COPY-TABLE-B,SRC,DEST,LEN,I
	DEC 'LEN
	SET 'I,0
?L1:	GETB SRC,I >STACK
	PUTB DEST,I,STACK
	IGRTR? 'I,LEN \?L1
	RTRUE

	.FUNCT STARTS-NOUN-PHRASE?,W
	EQUAL? W,W?A,W?AN,W?THE /TRUE
	EQUAL? W,W?ALL,W?EVERY,W?EVERYTHING /TRUE
	EQUAL? W,W?ANY,W?ONE /TRUE
	CALL CHKWORD?,W,PS?ADJECTIVE >STACK
	ZERO? STACK \TRUE
	CALL CHKWORD?,W,PS?OBJECT >STACK
	ZERO? STACK \TRUE
	RFALSE

	.FUNCT PARSE-NOUN-PHRASE,WN,NP,SILENT?=0,SPEC,CNT,W,VAL,MODE,ADJ,NOUN,BUT,SPEC-WN,NW
	GET NP,1 >SPEC
	PUTB NP,1,0
?L1:	GRTR? WN,P-LEN /?L2
	CALL GETWORD?,WN >W
	ZERO? W \?L5
	CALL PARSE-NUMBER?,WN >STACK
	ZERO? STACK /?L6
	SET 'W,W?$002cNUMBER
	ZERO? W \?L5
?L6:	ZERO? SILENT? \FALSE
	CALL STORE-OOPS,WN
	PRINTI "I don't know the word """
	CALL PRINT-WORD,WN
	PRINTI """."
	CRLF
	RFALSE
?L5:	EQUAL? W,W?THEN,W?$PERIOD /?L2
	ZERO? BUT \?L11
	EQUAL? W,W?BUT,W?EXCEPT \?L11
	ZERO? ADJ \?L14
	ZERO? NOUN /?L12
?L14:	PUT SPEC,0,ADJ
	PUT SPEC,1,NOUN
	SET 'NOUN,0
	SET 'ADJ,NOUN
	INC 'CNT
?L12:	PUTB NP,0,CNT
	SET 'BUT,1
	GET NP,2 >SPEC
	SET 'CNT,0
	JUMP ?L60
?L11:	EQUAL? W,W?ALL,W?EVERY,W?EVERYTHING /?L17
	EQUAL? W,W?ANY,W?ONE \?L16
?L17:	ZERO? MODE \?L20
	ZERO? ADJ \?L20
	ZERO? NOUN /?L18
?L20:	ZERO? SILENT? \FALSE
	PRINTI "You can't use """
	PRINTB W
	PRINTI """ there."
	CRLF
	RFALSE
?L18:	EQUAL? W,W?ALL,W?EVERY,W?EVERYTHING \?L25
	SET 'MODE,MCM-ALL
	JUMP ?L27
?L25:	SET 'MODE,MCM-ANY
?L27:	SET 'SPEC-WN,WN
	JUMP ?L60
?L16:	CALL CHKWORD?,W,PS?ADJECTIVE,P1?ADJECTIVE >VAL
	PUSH VAL
	ZERO? STACK /?L28
	ZERO? NOUN \?L2
	SET 'SPEC-WN,WN
	CALL CHKWORD?,W,PS?OBJECT >STACK
	ZERO? STACK /?L32
	EQUAL? WN,P-LEN /?L34
	ADD WN,1 >STACK
	CALL GETWORD?,STACK >NW
	CALL CHKWORD?,NW,PS?ADJECTIVE >STACK
	ZERO? STACK \?L32
	CALL CHKWORD?,NW,PS?OBJECT >STACK
	ZERO? STACK \?L32
?L34:	SET 'NOUN,W
	JUMP ?L60
?L32:	EQUAL? CNT,P-MAX-OBJSPECS \?L39
	ZERO? SILENT? \FALSE
	PRINTI "That phrase mentions too many objects."
	CRLF
	RFALSE
?L39:	ZERO? ADJ \?L60
	SET 'ADJ,VAL
	JUMP ?L60
?L28:	CALL CHKWORD?,W,PS?OBJECT >STACK
	ZERO? STACK /?L45
	ZERO? NOUN \?L2
	EQUAL? CNT,P-MAX-OBJSPECS \?L48
	ZERO? SILENT? \FALSE
	PRINTI "That phrase mentions too many objects."
	CRLF
	RFALSE
?L48:	SET 'NOUN,W
	SET 'SPEC-WN,WN
	JUMP ?L60
?L45:	EQUAL? W,W?AND,W?$COMMA \?L53
	ZERO? ADJ \?L56
	ZERO? NOUN /?L60
?L56:	PUT SPEC,0,ADJ
	PUT SPEC,1,NOUN
	SET 'NOUN,0
	SET 'ADJ,NOUN
	ADD SPEC,P-OBJSPEC-SIZE >SPEC
	INC 'CNT
	JUMP ?L60
?L53:	EQUAL? W,W?OF \?L58
	LESS? WN,P-LEN \?L58
	ADD WN,1 >STACK
	CALL GETWORD?,STACK >STACK
	CALL STARTS-NOUN-PHRASE?,STACK >STACK
	ZERO? STACK /?L58
	SET 'NOUN,0
	JUMP ?L60
?L58:	CALL CHKWORD?,W,PS?BUZZ-WORD >STACK
	ZERO? STACK /?L2
	SET 'SPEC-WN,WN
?L60:	INC 'WN
	JUMP ?L1
?L2:	ZERO? ADJ \?L63
	ZERO? NOUN /?L61
?L63:	PUT SPEC,0,ADJ
	PUT SPEC,1,NOUN
	INC 'CNT
?L61:	ZERO? BUT /?L65
	PUTB NP,1,CNT
	JUMP ?L67
?L65:	PUTB NP,0,CNT
?L67:	PUTB NP,6,MODE
	ADD SPEC-WN,1 >STACK
	RSTACK

	.FUNCT MATCH-SYNTAX,PTR,CNT,S,BEST,BEST-SCORE
	SUB 255,P-V >STACK
	GET VERBS,STACK >PTR
	GETB PTR,0 >CNT
	INC 'PTR
	SET 'BEST-SCORE,-999
?L1:	DLESS? 'CNT,0 /?L2
	CALL MATCH-SYNTAX-LINE?,PTR >S
	ZERO? S /?L8
	GRTR? S,BEST-SCORE \?L8
	SET 'BEST-SCORE,S
	SET 'BEST,PTR
	GRTR? S,0 /?L2
?L8:	ADD PTR,SYN-REC-SIZE >PTR
	JUMP ?L1
?L2:	ZERO? BEST /?L12
	GETB BEST,SYN-ACTION >PRSA
	SET 'P-SYNTAX,BEST
	RTRUE
?L12:	PRINTI "I don't understand that sentence."
	CRLF
	RFALSE

	.FUNCT MATCH-SYNTAX-LINE?,PTR,NOBJ,PREP1,PREP2,R
	GETB PTR,SYN-NOBJ >NOBJ
	GETB PTR,SYN-PREP1 >PREP1
	GETB PTR,SYN-PREP2 >PREP2
	EQUAL? P-NOBJ,NOBJ \?L1
	EQUAL? P-P1,PREP1 \?L1
	EQUAL? P-P2,PREP2 /TRUE
?L1:	LESS? P-NOBJ,NOBJ \FALSE
	EQUAL? P-P1,PREP1,0 \FALSE
	EQUAL? P-P2,PREP2,0 \FALSE
	EQUAL? P-NOBJ,1 \?L6
	ZERO? PREP1 /?L6
	ZERO? P-P1 /FALSE
?L6:	LESS? NOBJ,1 /?L9
	ZERO? P-NOBJ \?L9
	ZERO? P-P1 \?L9
	ZERO? PREP1 /?L9
	GETB PTR,SYN-FIND1 >STACK
	EQUAL? STACK,KLUDGEBIT /FALSE
?L9:	EQUAL? NOBJ,2 \?L7
	ZERO? P-P2 \?L7
	ZERO? PREP2 /?L7
	GETB PTR,SYN-FIND2 >STACK
	EQUAL? STACK,KLUDGEBIT /FALSE
?L7:	SUB P-NOBJ,NOBJ >R
	ZERO? P-P1 \?L11
	ZERO? PREP1 /?L11
	SUB R,2 >R
?L11:	EQUAL? NOBJ,2 \?L14
	ZERO? P-P2 \?L14
	ZERO? PREP2 \?L14
	DEC 'R
?L14:	RETURN R

	.FUNCT INVENTORY-SCOPE-STAGE,INIT
	ZERO? INIT /?L1
	FIRST? WINNER >STACK /?L3
?L3:	PUT SCOPE-STATE,0,STACK
	PUT SCOPE-STATE,1,WINNER
	RTRUE
?L1:	CALL SCOPE-CRAWL >STACK
	RSTACK

	.FUNCT LOCATION-SCOPE-STAGE,INIT
	ZERO? INIT /?L1
	FIRST? HERE >STACK /?L3
?L3:	PUT SCOPE-STATE,0,STACK
	PUT SCOPE-STATE,1,HERE
	RTRUE
?L1:	CALL SCOPE-CRAWL >STACK
	RSTACK

	.FUNCT LOCAL-GLOBALS-SCOPE-STAGE,INIT,N
	ZERO? INIT /?L1
	FIRST? LOCAL-GLOBALS >STACK /?L3
?L3:	PUT SCOPE-STATE,0,STACK
	PUT SCOPE-STATE,1,LOCAL-GLOBALS
	RTRUE
?L1:	CALL SCOPE-CRAWL >N
	ZERO? N /FALSE
	CALL GLOBAL-IN?,N,HERE >STACK
	ZERO? STACK /?L9
	RETURN N
?L9:	PUSH 0
	JUMP ?L1

	.FUNCT GLOBALS-SCOPE-STAGE,INIT
	ZERO? INIT /?L1
	FIRST? GLOBAL-OBJECTS >STACK /?L3
?L3:	PUT SCOPE-STATE,0,STACK
	PUT SCOPE-STATE,1,GLOBAL-OBJECTS
	RTRUE
?L1:	CALL SCOPE-CRAWL >STACK
	RSTACK

	.FUNCT GENERIC-SCOPE-STAGE,INIT
	ZERO? INIT /?L1
	FIRST? GENERIC-OBJECTS >STACK /?L3
?L3:	PUT SCOPE-STATE,0,STACK
	PUT SCOPE-STATE,1,GENERIC-OBJECTS
	RTRUE
?L1:	CALL SCOPE-CRAWL >STACK
	RSTACK

	.FUNCT MAP-SCOPE-INIT-STAGES-FROM-BITS,BITS,CNT=0
	EQUAL? -1,BITS \?L1
	PUT SCOPE-CURRENT-STAGES,0,5
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,INVENTORY-SCOPE-STAGE
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,LOCATION-SCOPE-STAGE
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,LOCAL-GLOBALS-SCOPE-STAGE
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,GLOBALS-SCOPE-STAGE
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,GENERIC-SCOPE-STAGE
	RTRUE
?L1:	BTST BITS,SF-HELD /?L8
	BTST BITS,SF-CARRIED \?L6
?L8:	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,INVENTORY-SCOPE-STAGE
?L6:	BTST BITS,SF-ON-GROUND /?L12
	BTST BITS,SF-IN-ROOM \?L10
?L12:	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,LOCATION-SCOPE-STAGE
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,GLOBALS-SCOPE-STAGE
	INC 'CNT
	PUT SCOPE-CURRENT-STAGES,CNT,LOCAL-GLOBALS-SCOPE-STAGE
?L10:	PUT SCOPE-CURRENT-STAGES,0,CNT
	RTRUE

	.FUNCT MAP-SCOPE-START,V,LEN,NEED-LIGHT=0
	GET SCOPE-CURRENT-STAGES,0 >LEN
	ZERO? HERE-LIT \?L1
	BTST MAP-SCOPE-OPTIONS,MSO-NEED-LIGHT \?L1
	SET 'NEED-LIGHT,1
?L1:	ZERO? NEED-LIGHT /?L4
	SET 'MAP-SCOPE-STATUS,MS-NO-LIGHT
	JUMP ?L6
?L4:	SET 'MAP-SCOPE-STATUS,MS-FINISHED
?L6:	SET 'SCOPE-CURRENT-STAGE,0
?L7:	IGRTR? 'SCOPE-CURRENT-STAGE,LEN /FALSE
	ZERO? NEED-LIGHT /?L11
	CALL DARKNESS-F,M-SCOPE? >STACK
	ZERO? STACK /?L7
?L11:	GET SCOPE-CURRENT-STAGES,SCOPE-CURRENT-STAGE >STACK
	CALL STACK,1 >V
	ZERO? V /?L12
	EQUAL? V,-1 \TRUE
	RFALSE
?L12:	PUSH 0
	JUMP ?L7

	.FUNCT MAP-SCOPE-NEXT,S,N,LEN,INIT=0,NEED-LIGHT=0
	GET SCOPE-CURRENT-STAGES,0 >LEN
	ZERO? HERE-LIT \?L1
	BTST MAP-SCOPE-OPTIONS,MSO-NEED-LIGHT \?L1
	SET 'NEED-LIGHT,1
?L1:	GRTR? SCOPE-CURRENT-STAGE,LEN /FALSE
	ZERO? NEED-LIGHT /?L9
	CALL DARKNESS-F,M-SCOPE? >STACK
	ZERO? STACK /?L8
?L9:	GET SCOPE-CURRENT-STAGES,SCOPE-CURRENT-STAGE >S
	ZERO? S /?L8
	ZERO? INIT /?L10
	CALL S,1 >STACK
	ZERO? STACK /?L8
?L10:	CALL S >N
	ZERO? N /?L8
	EQUAL? N,-1 /FALSE
	RETURN N
?L8:	INC 'SCOPE-CURRENT-STAGE
	SET 'INIT,1
	PUSH INIT
	JUMP ?L1

	.FUNCT SCOPE-CRAWL,O,N,C,L
	GET SCOPE-STATE,0 >O
	ZERO? O /FALSE
	GET SCOPE-STATE,1 >C
	FIRST? O >N \?L3
	CALL SEE-INSIDE?,O >STACK
	ZERO? STACK \?L8
?L3:	NEXT? O >N /?L8
	LOC O >L
?L7:	EQUAL? L,C,0 \?L9
	SET 'N,0
	JUMP ?L8
?L9:	NEXT? L >N /?L8
	LOC L >L
	JUMP ?L7
?L8:	PUT SCOPE-STATE,0,N
	RETURN O

	.FUNCT FIND-OBJECTS,KEEP,F,O,SNOBJ
	GETB P-SYNTAX,SYN-NOBJ >SNOBJ
	GETB P-SYNTAX,SYN-OPTS1 >O
	LESS? SNOBJ,1 \?L1
	SET 'PRSO,0
	JUMP ?L19
?L1:	LESS? KEEP,1 \?L19
	GETB P-SYNTAX,SYN-FIND1 >F
	LESS? P-NOBJ,1 \?L4
	GETB P-SYNTAX,SYN-PREP1 >STACK
	CALL GWIM,F,O,STACK >PRSO
	ZERO? PRSO \?L6
	CALL WHAT-DO-YOU-WANT
	SET 'P-O-REASON,49152
	SET 'P-V-WORDN,0
	SET 'P-O-CONT,P-CONT
	RFALSE
?L6:	SET 'P-NOBJ,1
	PUTB P-PRSOS,1,PRSO
	PUTB P-PRSOS,0,1
	JUMP ?L16
?L4:	GETB P-NP-DOBJ,0 >STACK
	EQUAL? STACK,1 /?L15
	SET 'PRSO,0
	JUMP ?L14
?L15:	GET P-NP-DOBJ,1 >STACK
	GET STACK,1 >STACK
	CALL EXPAND-PRONOUN,STACK,P-PRSOS >PRSO
?L14:	ZERO? PRSO \?L12
	MUL F,256 >STACK
	BOR STACK,O >STACK
	CALL MATCH-NOUN-PHRASE,P-NP-DOBJ,P-PRSOS,STACK >PRSO
?L12:	EQUAL? PRSO,EXPAND-PRONOUN-FAILED /FALSE
?L16:	ZERO? PRSO \?L53
	RFALSE
?L19:	ZERO? PRSO /?L23
?L53:	ZERO? PRSO-DIR \?L23
	CALL MANY-CHECK,PRSO,O,0 >STACK
	ZERO? STACK /FALSE
	CALL HAVE-TAKE-CHECK-TBL,P-PRSOS,O >STACK
	ZERO? STACK /FALSE
?L23:	GETB P-SYNTAX,SYN-OPTS2 >O
	LESS? SNOBJ,2 \?L27
	SET 'PRSI,0
	JUMP ?L45
?L27:	LESS? KEEP,2 \?L45
	GETB P-SYNTAX,SYN-FIND2 >F
	LESS? P-NOBJ,2 \?L30
	GETB P-SYNTAX,SYN-PREP2 >STACK
	CALL GWIM,F,O,STACK >PRSI
	ZERO? PRSI \?L32
	CALL WHAT-DO-YOU-WANT
	SET 'P-O-REASON,57344
	SET 'P-V-WORDN,0
	SET 'P-O-CONT,P-CONT
	RFALSE
?L32:	SET 'P-NOBJ,2
	PUTB P-PRSIS,1,PRSI
	PUTB P-PRSIS,0,1
	JUMP ?L42
?L30:	GETB P-NP-IOBJ,0 >STACK
	EQUAL? STACK,1 /?L41
	SET 'PRSI,0
	JUMP ?L40
?L41:	GET P-NP-IOBJ,1 >STACK
	GET STACK,1 >STACK
	CALL EXPAND-PRONOUN,STACK,P-PRSIS >PRSI
?L40:	ZERO? PRSI \?L38
	MUL F,256 >STACK
	BOR STACK,O >STACK
	CALL MATCH-NOUN-PHRASE,P-NP-IOBJ,P-PRSIS,STACK >PRSI
?L38:	EQUAL? PRSI,EXPAND-PRONOUN-FAILED /FALSE
?L42:	ZERO? PRSI \?L54
	RFALSE
?L45:	ZERO? PRSI /TRUE
?L54:	CALL MANY-CHECK,PRSI,O,1 >STACK
	ZERO? STACK /FALSE
	CALL HAVE-TAKE-CHECK-TBL,P-PRSIS,O >STACK
	ZERO? STACK \TRUE
	RFALSE

	.FUNCT WHAT-DO-YOU-WANT,SN,SP1,SP2,F
	GETB P-SYNTAX,SYN-NOBJ >SN
	GETB P-SYNTAX,SYN-PREP1 >SP1
	GETB P-SYNTAX,SYN-PREP2 >SP2
	ZERO? PRSO /?L1
	ZERO? PRSO-DIR \?L1
	GETB P-SYNTAX,SYN-FIND2 >F
	JUMP ?L3
?L1:	GETB P-SYNTAX,SYN-FIND1 >F
?L3:	EQUAL? PRSA,V?WALK \?L4
	ZERO? PRSO \?L4
	PRINTI "Which way"
	JUMP ?L7
?L4:	EQUAL? F,PERSONBIT \?L6
	PRINTI "Whom"
	JUMP ?L7
?L6:	PRINTI "What"
?L7:	PRINTI " do you want"
	EQUAL? WINNER,PLAYER /?L8
	PRINTI " "
	CALL PRINT-DEF,WINNER
?L8:	PRINTI " to "
	CALL PRINT-VERB
	ZERO? SP1 /?L11
	PRINTI " "
	CALL GET-PREP-WORD,SP1 >STACK
	PRINTB STACK
?L11:	ZERO? PRSO /?L16
	ZERO? PRSO-DIR \?L16
	PRINTI " "
	CALL PRINT-DEF,PRSO
	ZERO? SP2 /?L16
	PRINTI " "
	CALL GET-PREP-WORD,SP2 >STACK
	PRINTB STACK
?L16:	PRINTR "?"

	.FUNCT PRINT-VERB
	ZERO? P-V-WORDN /?L1
	CALL PRINT-WORD,P-V-WORDN >STACK
	RSTACK
?L1:	PRINTB P-V-WORD
	RTRUE

	.FUNCT MANY-CHECK,OBJ,OPTS,INDIRECT?
	EQUAL? OBJ,MANY-OBJECTS \TRUE
	BTST OPTS,SF-MANY /TRUE
	EQUAL? PRSA,V?TELL \?L3
	PRINTI "You can only address one person at a time."
	JUMP ?L5
?L3:	PRINTI "You can't use multiple "
	ZERO? INDIRECT? /?L6
	PRINTI "in"
?L6:	PRINTI "direct objects with """
	CALL PRINT-VERB
	PRINTI """."
?L5:	CRLF
	SET 'P-CONT,0
	RFALSE

	.FUNCT HAVE-TAKE-CHECK-TBL,TBL,OPTS,MAX,DO-TAKE?,O,N,ORM,I
	GETB TBL,0 >MAX
	BTST OPTS,SF-TAKE \?L5
	SET 'I,1
?L3:	GETB TBL,I >STACK
	CALL SHOULD-IMPLICIT-TAKE?,STACK >STACK
	ZERO? STACK /?L6
	PRINTI "[taking "
	CALL LIST-OBJECTS,TBL,SHOULD-IMPLICIT-TAKE?,24 >N
	PRINTI "]"
	CRLF
?L8:	GETB TBL,I >O
	CALL SHOULD-IMPLICIT-TAKE?,O >STACK
	ZERO? STACK /?L12
	CALL TRY-TAKE,O,1 >STACK
	ZERO? STACK \?L12
	GRTR? N,1 \?L14
	SET 'ORM,REPORT-MODE
	SET 'REPORT-MODE,SHORT-REPORT
	PRINTD O
	PRINTI ": "
	CALL TRY-TAKE,O
	SET 'REPORT-MODE,ORM
	RFALSE
?L14:	CALL TRY-TAKE,O
	RFALSE
?L12:	IGRTR? 'I,MAX \?L8
	JUMP ?L5
?L6:	IGRTR? 'I,MAX \?L3
?L5:	BTST OPTS,SF-HAVE \TRUE
	SET 'I,1
?L26:	GETB TBL,I >STACK
	CALL FAILS-HAVE-CHECK?,STACK >STACK
	ZERO? STACK /?L29
	PRINTI "You aren't holding "
	CALL LIST-OBJECTS,TBL,FAILS-HAVE-CHECK?,56
	PRINTI "."
	CRLF
	SET 'P-CONT,0
	RFALSE
?L29:	IGRTR? 'I,MAX \?L26
	RTRUE

	.FUNCT HAVE-TAKE-CHECK,OBJ,OPTS
	BTST OPTS,SF-TAKE \?L5
	CALL SHOULD-IMPLICIT-TAKE?,OBJ >STACK
	ZERO? STACK /?L5
	PRINTI "[taking "
	CALL PRINT-DEF,OBJ
	PRINTI "]"
	CRLF
	CALL TRY-TAKE,OBJ,1 >STACK
	ZERO? STACK \?L5
	CALL TRY-TAKE,OBJ
	RFALSE
?L5:	BTST OPTS,SF-HAVE \TRUE
	CALL FAILS-HAVE-CHECK?,OBJ >STACK
	ZERO? STACK /TRUE
	PRINTI "You aren't holding "
	CALL PRINT-DEF,OBJ
	PRINTI "."
	CRLF
	SET 'P-CONT,0
	RFALSE

	.FUNCT SHOULD-IMPLICIT-TAKE?,OBJ
	IN? OBJ,WINNER /FALSE
	FSET? OBJ,TAKEBIT \FALSE
	FSET? OBJ,TRYTAKEBIT \TRUE
	RFALSE

	.FUNCT FAILS-HAVE-CHECK?,OBJ
	CALL HELD?,OBJ >STACK
	ZERO? STACK /TRUE
	RFALSE

	.FUNCT STILL-VISIBLE-CHECK,TBL,CNT,I
	GETB TBL,0 >CNT
	ZERO? CNT /TRUE
	SET 'I,1
?L3:	GETB TBL,I >STACK
	CALL VISIBLE?,STACK >STACK
	ZERO? STACK \?L6
	CALL LIST-OBJECTS,TBL,NOT-VISIBLE?,90
	PRINTI " no longer here."
	CRLF
	SET 'P-CONT,0
	RFALSE
?L6:	IGRTR? 'I,CNT \?L3
	RTRUE

	.FUNCT NOT-VISIBLE?,O
	CALL VISIBLE?,O >STACK
	ZERO? STACK /TRUE
	RFALSE

	.FUNCT GWIM,BIT,OPTS,PREP,O,PW,I
	EQUAL? BIT,KLUDGEBIT \?L1
	RETURN ROOMS
?L1:	EQUAL? PRSA,V?WALK /FALSE
	CALL MAP-SCOPE-INIT-STAGES-FROM-BITS,OPTS
	SET 'MAP-SCOPE-OPTIONS,MSO-NEED-LIGHT
	CALL MAP-SCOPE-START >STACK
	ZERO? STACK /?L11
?L7:	CALL MAP-SCOPE-NEXT >I
	ZERO? I /?L11
	EQUAL? I,WINNER /?L7
	ZERO? BIT /?L17
	FSET? I,BIT \?L7
?L17:	ZERO? O \FALSE
	SET 'O,I
	JUMP ?L7
?L11:	ZERO? O /FALSE
	PRINTI "["
	CALL GET-PREP-WORD,PREP >PW
	ZERO? PW /?L24
	PRINTB PW
	PRINTI " "
?L24:	CALL PRINT-DEF,O
	PRINTI "]"
	CRLF
	RETURN O

	.FUNCT GET-PREP-WORD,PREP,MAX,I
	GET PREPOSITIONS,0 >STACK
	MUL STACK,2 >STACK
	SUB STACK,1 >MAX
	SET 'I,1
?L1:	ADD I,1 >STACK
	GET PREPOSITIONS,STACK >STACK
	EQUAL? STACK,PREP \?L4
	GET PREPOSITIONS,I >STACK
	RSTACK
?L4:	ADD I,2 >I
	GRTR? I,MAX \?L1
	RFALSE

	.FUNCT SEARCH-FOR-LIGHT,I
	FSET? HERE,LIGHTBIT /TRUE
	PUT SCOPE-CURRENT-STAGES,0,4
	PUT SCOPE-CURRENT-STAGES,1,LOCATION-SCOPE-STAGE
	PUT SCOPE-CURRENT-STAGES,2,INVENTORY-SCOPE-STAGE
	PUT SCOPE-CURRENT-STAGES,3,GLOBALS-SCOPE-STAGE
	PUT SCOPE-CURRENT-STAGES,4,LOCAL-GLOBALS-SCOPE-STAGE
	SET 'MAP-SCOPE-OPTIONS,0
	CALL MAP-SCOPE-START >STACK
	ZERO? STACK /FALSE
?L6:	CALL MAP-SCOPE-NEXT >I
	ZERO? I /FALSE
	FSET? I,LIGHTBIT \?L6
	RETURN I

	.FUNCT SEE-INSIDE?,OBJ
	FSET? OBJ,SURFACEBIT /TRUE
	FSET? OBJ,CONTBIT \FALSE
	FSET? OBJ,OPENBIT /TRUE
	FSET? OBJ,TRANSBIT /TRUE
	FSET? OBJ,OPENABLEBIT \TRUE
	RFALSE

	.FUNCT MATCH-NOUN-PHRASE,NP,OUT,BITS,F,NY,NN,SPEC,MODE,NOUT,OBITS,ONOUT,BEST,Q,I,I?1
	GETB NP,0 >NY
	GETB NP,1 >NN
	GETB NP,6 >MODE
	SET 'OBITS,BITS
	ZERO? MODE \?L1
	BOR BITS,240 >BITS
?L1:	SET 'NOUT,0
	ZERO? NY \?L6
	CALL MAP-SCOPE-INIT-STAGES-FROM-BITS,BITS
	SET 'MAP-SCOPE-OPTIONS,MSO-NEED-LIGHT
	CALL MAP-SCOPE-START >STACK
	ZERO? STACK /?L27
?L10:	CALL MAP-SCOPE-NEXT >I
	ZERO? I /?L27
	GET SCOPE-CURRENT-STAGES,SCOPE-CURRENT-STAGE >STACK
	EQUAL? STACK,GENERIC-SCOPE-STAGE,GLOBALS-SCOPE-STAGE /?L10
	CALL ALL-INCLUDES?,I >STACK
	ZERO? STACK /?L10
	ZERO? NN /?L21
	GETB NP,1 >STACK
	GET NP,2 >STACK
	CALL ANY-SPEC-REFERS?,STACK,STACK,I >STACK
	ZERO? STACK \?L10
?L21:	LESS? NOUT,P-MAX-OBJECTS /?L22
	PRINTI "[too many objects!]"
	CRLF
	JUMP ?L27
?L22:	INC 'NOUT
	PUTB OUT,NOUT,I
	JUMP ?L10
?L6:	SET 'I,1
?L25:	SUB I,1 >STACK
	MUL 4,STACK >STACK
	GET NP,1 >STACK
	ADD STACK,STACK >SPEC
	SET 'F,0
	SET 'ONOUT,NOUT
	SET 'BEST,1
	CALL MAP-SCOPE-INIT-STAGES-FROM-BITS,BITS
	SET 'MAP-SCOPE-OPTIONS,MSO-NEED-LIGHT
	CALL MAP-SCOPE-START >STACK
	ZERO? STACK /?L34
?L30:	CALL MAP-SCOPE-NEXT >I?1
	ZERO? I?1 /?L34
	FSET? I?1,INVISIBLE /?L30
	CALL REFERS?,SPEC,I?1 >Q
	ZERO? Q /?L30
	LESS? Q,BEST /?L30
	SET 'F,1
	GRTR? Q,BEST \?L40
	SET 'NOUT,ONOUT
	SET 'BEST,Q
?L40:	ZERO? NN /?L43
	GETB NP,1 >STACK
	GET NP,2 >STACK
	CALL ANY-SPEC-REFERS?,STACK,STACK,I?1 >STACK
	ZERO? STACK \?L30
?L43:	LESS? NOUT,P-MAX-OBJECTS /?L45
	PRINTI "[too many objects!]"
	CRLF
	JUMP ?L34
?L45:	INC 'NOUT
	PUTB OUT,NOUT,I?1
	JUMP ?L30
?L34:	ZERO? F \?L58
	BTST BITS,SF-ON-GROUND \?L55
	GETP HERE,P?THINGS >Q
	ZERO? Q /?L55
	CALL MATCH-PSEUDO,SPEC,Q >F
	ZERO? F /?L91
	ZERO? NN /?L52
	GETB NP,1 >STACK
	GET NP,2 >STACK
	CALL ANY-SPEC-REFERS-PSEUDO?,STACK,STACK,F >STACK
	ZERO? STACK \?L55
?L52:	LESS? NOUT,P-MAX-OBJECTS /?L54
	PRINTI "[too many objects!]"
	CRLF
	JUMP ?L27
?L54:	INC 'NOUT
	CALL MAKE-PSEUDO,F >STACK
	PUTB OUT,NOUT,STACK
?L55:	ZERO? F \?L58
?L91:	EQUAL? BITS,-1 /?L60
	SET 'BITS,-1
	SET 'OBITS,-1
	JUMP ?L1
?L60:	EQUAL? MAP-SCOPE-STATUS,MS-NO-LIGHT \?L63
	PRINTI "It's too dark to see anything here."
	CRLF
	RFALSE
?L63:	PRINTI "You don't see that here."
	CRLF
	RFALSE
?L58:	LESS? NOUT,P-MAX-OBJECTS \?L27
	IGRTR? 'I,NY \?L25
?L27:	PUTB OUT,0,NOUT
	ZERO? NOUT \?L68
	BOR BITS,240 >F
	EQUAL? BITS,F \?L70
	PRINTI "There are none at all available!"
	CRLF
	RFALSE
?L70:	SET 'BITS,F
	SET 'OBITS,F
	JUMP ?L1
?L68:	EQUAL? NOUT,1 \?L73
	GETB OUT,1 >STACK
	RSTACK
?L73:	EQUAL? MODE,MCM-ALL /?L75
	GRTR? NY,1 \?L74
?L75:	RETURN MANY-OBJECTS
?L74:	EQUAL? MODE,MCM-ANY \?L76
	RANDOM NOUT >STACK
	GETB OUT,STACK >F
	PUTB OUT,1,F
	PUTB OUT,0,1
	PRINTI "["
	CALL PRINT-DEF,F
	PRINTI "]"
	CRLF
	RETURN F
?L76:	EQUAL? BITS,OBITS /?L78
	SET 'BITS,OBITS
	JUMP ?L1
?L78:	CALL APPLY-GENERIC-FCN,OUT >F
	ZERO? F /?L81
	PUTB OUT,1,F
	PUTB OUT,0,1
	RETURN F
?L81:	CALL WHICH-DO-YOU-MEAN,OUT
	EQUAL? NP,P-NP-DOBJ \?L84
	SET 'P-O-REASON,32768
	SET 'P-V-WORDN,0
	SET 'P-O-CONT,P-CONT
	RFALSE
?L84:	SET 'P-O-REASON,40960
	SET 'P-V-WORDN,0
	SET 'P-O-CONT,P-CONT
	RFALSE

	.FUNCT ALL-INCLUDES?,OBJ
	FSET? OBJ,INVISIBLE /FALSE
	EQUAL? OBJ,WINNER /FALSE
	EQUAL? PRSA,V?TAKE,V?DROP \TRUE
	FSET? OBJ,TAKEBIT /TRUE
	FSET? OBJ,TRYTAKEBIT /TRUE
	RFALSE

	.FUNCT APPLY-GENERIC-FCN,TBL,MAX,F,R,I
	GETB TBL,0 >MAX
	SET 'I,1
?L1:	GETB TBL,I >STACK
	GETP STACK,P?GENERIC >F
	CALL F,TBL >R
	ZERO? R /?L4
	RETURN R
?L4:	IGRTR? 'I,MAX \?L1
	RFALSE

	.FUNCT WHICH-DO-YOU-MEAN,TBL
	PRINTI "Which do you mean, "
	CALL LIST-OBJECTS,TBL,0,56
	PRINTR "?"

	.FUNCT ANY-SPEC-REFERS?,TBL,N,O,I
	ZERO? N /FALSE
	SET 'I,1
?L4:	CALL REFERS?,TBL,O >STACK
	ZERO? STACK \TRUE
	ADD TBL,P-OBJSPEC-SIZE >TBL
	IGRTR? 'I,N \?L4
	RFALSE

	.FUNCT ANY-SPEC-REFERS-PSEUDO?,TBL,N,PDO,I
	ZERO? N /FALSE
	SET 'I,1
?L4:	CALL REFERS-PSEUDO?,TBL,PDO >STACK
	ZERO? STACK \TRUE
	ADD TBL,P-OBJSPEC-SIZE >TBL
	IGRTR? 'I,N \?L4
	RFALSE

	.FUNCT GLOBAL-IN?,O,R
	FSET? O,INVISIBLE /FALSE
	CALL IN-PBTBL?,R,P?GLOBAL,O >STACK
	RSTACK

	.FUNCT REFERS?,SPEC,O,A,N
	GET SPEC,0 >A
	GET SPEC,1 >N
	ZERO? A /?L1
	ZERO? N /?L6
	CALL IN-PBTBL?,O,P?ADJECTIVE,A >STACK
	ZERO? STACK /FALSE
	CALL IN-PWTBL?,O,P?SYNONYM,N >STACK
	ZERO? STACK /FALSE
	RETURN 3
?L1:	ZERO? N /?L6
	CALL IN-PWTBL?,O,P?SYNONYM,N >STACK
	ZERO? STACK /?L7
	RETURN 2
?L7:	CALL CHKWORD?,N,PS?ADJECTIVE,P1?ADJECTIVE >A
	PUSH A
	ZERO? STACK /FALSE
	CALL IN-PBTBL?,O,P?ADJECTIVE,A >STACK
	ZERO? STACK /FALSE
	RTRUE
?L6:	ZERO? A /FALSE
	CALL IN-PBTBL?,O,P?ADJECTIVE,A >STACK
	ZERO? STACK /FALSE
	RTRUE

	.FUNCT IN-PWTBL?,O,P,V,PT,MAX
	GETPT O,P >PT
	ZERO? PT /FALSE
	PTSIZE PT >STACK
	DIV STACK,2 >STACK
	CALL IN-WTBL?,PT,STACK,V >STACK
	RSTACK

	.FUNCT IN-PBTBL?,O,P,V,PT,MAX
	GETPT O,P >PT
	ZERO? PT /FALSE
	PTSIZE PT >STACK
	CALL IN-BTBL?,PT,STACK,V >STACK
	RSTACK

	.FUNCT IN-WTBL?,TBL,CNT,V,I
	ZERO? CNT /FALSE
	DEC 'CNT
	SET 'I,0
?L3:	GET TBL,I >STACK
	EQUAL? STACK,V /TRUE
	IGRTR? 'I,CNT \?L3
	RFALSE

	.FUNCT IN-BTBL?,TBL,CNT,V,I
	ZERO? CNT /FALSE
	DEC 'CNT
	SET 'I,0
?L3:	GETB TBL,I >STACK
	EQUAL? STACK,V /TRUE
	IGRTR? 'I,CNT \?L3
	RFALSE

	.FUNCT COPY-LEXBUF,SRC,DEST,WDS
	GETB SRC,1 >WDS
	PUTB DEST,1,WDS
	MUL 2,WDS >STACK
	ADD DEST,2 >STACK
	ADD SRC,2 >STACK
	CALL COPY-TABLE,STACK,STACK,STACK >STACK
	RSTACK

	.FUNCT COPY-READBUF,SRC,DEST
	CALL COPY-TABLE,SRC,DEST,50 >STACK
	RSTACK

	.FUNCT READBUF-LENGTH,TBL,P
	SET 'P,1
?L1:	INC 'P
	GETB TBL,P >STACK
	ZERO? STACK \?L3
	SUB P,2 >STACK
	RSTACK
?L3:	PUSH 0
	JUMP ?L1

	.FUNCT READLINE,PROMPT?,OHERE
	ZERO? PROMPT? /?L1
	CRLF
	PRINTI "> "
?L1:	SET 'READBUF,KBD-READBUF
	SET 'LEXBUF,KBD-LEXBUF
	PUTB READBUF,0,98
	SET 'OHERE,HERE
	ZERO? HERE-LIT \?L6
	SET 'HERE,ROOMS
?L6:	READ READBUF,LEXBUF
	SET 'HERE,OHERE
	RTRUE

	.FUNCT PERFORM,ACT,DOBJ,IOBJ,PRTN,RTN,OA,OD,ODD,OI,WON,CNT,ORM,I
	GET PREACTIONS,ACT >PRTN
	GET ACTIONS,ACT >RTN
	SET 'OA,PRSA
	SET 'OD,PRSO
	SET 'ODD,PRSO-DIR
	SET 'OI,PRSI
	SET 'ORM,REPORT-MODE
	SET 'PRSA,ACT
	SET 'PRSO,DOBJ
	EQUAL? ACT,V?WALK /?L1
	SET 'PRSO-DIR,0
?L1:	SET 'PRSI,IOBJ
	CALL COUNT-PRS-APPEARANCES,NUMBER >STACK
	GRTR? STACK,1 \?L3
	PRINTI "You can't use more than one number in a command."
	CRLF
	SET 'WON,0
	JUMP ?L16
?L3:	ZERO? PRSO-DIR \?L5
	EQUAL? PRSO,MANY-OBJECTS \?L5
	EQUAL? PRSI,MANY-OBJECTS \?L6
	PRINTI "You can't use multiple direct and indirect objects together."
	CRLF
	SET 'WON,0
	JUMP ?L16
?L6:	SET 'REPORT-MODE,SHORT-REPORT
	GETB P-PRSOS,0 >CNT
	SET 'I,1
?L9:	GETB P-PRSOS,I >PRSO
	PRINTD PRSO
	PRINTI ": "
	CALL PERFORM-CALL-HANDLERS,PRTN,RTN >WON
	IGRTR? 'I,CNT \?L9
	JUMP ?L16
?L5:	EQUAL? PRSI,MANY-OBJECTS \?L12
	SET 'REPORT-MODE,SHORT-REPORT
	GETB P-PRSIS,0 >CNT
	SET 'I,1
?L13:	GETB P-PRSIS,I >PRSI
	PRINTD PRSI
	PRINTI ": "
	CALL PERFORM-CALL-HANDLERS,PRTN,RTN >WON
	IGRTR? 'I,CNT \?L13
	JUMP ?L16
?L12:	CALL PERFORM-CALL-HANDLERS,PRTN,RTN >WON
?L16:	SET 'PRSA,OA
	SET 'PRSO,OD
	SET 'PRSO-DIR,ODD
	SET 'PRSI,OI
	SET 'REPORT-MODE,ORM
	RETURN WON

	.FUNCT COUNT-PRS-APPEARANCES,O,R,MAX,I
	EQUAL? PRSO,O \?L1
	INC 'R
	JUMP ?L6
?L1:	EQUAL? PRSO,MANY-OBJECTS \?L6
	GETB P-PRSOS,0 >MAX
	SET 'I,1
?L4:	GETB P-PRSOS,I >STACK
	EQUAL? STACK,O \?L7
	INC 'R
?L7:	IGRTR? 'I,MAX \?L4
?L6:	EQUAL? PRSI,O \?L11
	INC 'R
	RETURN R
?L11:	EQUAL? PRSI,MANY-OBJECTS \?L16
	GETB P-PRSIS,0 >MAX
	SET 'I,1
?L14:	GETB P-PRSIS,I >STACK
	EQUAL? STACK,O \?L17
	INC 'R
?L17:	IGRTR? 'I,MAX \?L14
?L16:	RETURN R

	.FUNCT PERFORM-CALL-HANDLERS,PRTN,RTN,AC,RM
	GETP WINNER,P?ACTION >AC
	ZERO? AC /?L1
	CALL AC,M-WINNER >STACK
	ZERO? STACK \TRUE
?L1:	LOC WINNER >RM
	ZERO? RM /?L3
	GETP RM,P?ACTION >AC
	ZERO? AC /?L3
	CALL AC,M-BEG >STACK
	ZERO? STACK \TRUE
?L3:	ZERO? PRTN /?L4
	CALL PRTN >STACK
	ZERO? STACK \TRUE
?L4:	ZERO? PRSI /?L6
	LOC PRSI >RM
	ZERO? RM /?L5
	GETP RM,P?CONTFCN >AC
	ZERO? AC /?L5
	CALL AC >STACK
	ZERO? STACK \TRUE
?L5:	ZERO? PRSI /?L6
	GETP PRSI,P?ACTION >AC
	ZERO? AC /?L6
	CALL AC >STACK
	ZERO? STACK \TRUE
?L6:	ZERO? PRSO /?L8
	ZERO? PRSO-DIR \?L7
	LOC PRSO >RM
	ZERO? RM /?L7
	GETP RM,P?CONTFCN >AC
	ZERO? AC /?L7
	CALL AC >STACK
	ZERO? STACK \TRUE
?L7:	ZERO? PRSO /?L8
	ZERO? PRSO-DIR \?L8
	GETP PRSO,P?ACTION >AC
	ZERO? AC /?L8
	CALL AC >STACK
	ZERO? STACK \TRUE
?L8:	CALL RTN >STACK
	RSTACK

	.FUNCT GOTO,RM,WAS-LIT,F
	SET 'WAS-LIT,HERE-LIT
	SET 'HERE,RM
	MOVE WINNER,HERE
	GETP RM,P?ACTION >STACK
	CALL STACK,M-ENTER >STACK
	CALL SEARCH-FOR-LIGHT >HERE-LIT
	ZERO? WAS-LIT \?L1
	ZERO? HERE-LIT /?L3
	CALL DARKNESS-F,M-DARK-TO-LIT >F
	JUMP ?L9
?L3:	CALL DARKNESS-F,M-DARK-TO-DARK >STACK
	ZERO? STACK \?L6
	CALL DARKNESS-F,M-LOOK >STACK
	ZERO? STACK /?L9
?L6:	SET 'F,1
	JUMP ?L9
?L1:	ZERO? HERE-LIT \?L9
	CALL DARKNESS-F,M-LIT-TO-DARK >STACK
	ZERO? STACK \?L10
	CALL DARKNESS-F,M-LOOK >STACK
	ZERO? STACK /?L9
?L10:	SET 'F,1
?L9:	ZERO? F \?L12
	CALL DESCRIBE-ROOM,HERE >STACK
	ZERO? STACK /?L12
	CALL DESCRIBE-OBJECTS,HERE
?L12:	ZERO? HERE-LIT /FALSE
	FSET HERE,TOUCHBIT
	RTRUE

	.FUNCT FIND-IN,C,BIT,WORD,N,W,PT,MAX,I,I?1
	FIRST? C >I \?L3
?L1:	FSET? I,BIT \?L4
	INC 'N
	SET 'W,I
?L4:	NEXT? I >I /?L1
?L3:	ZERO? N \?L11
	GETPT C,P?GLOBAL >PT
	ZERO? PT /?L11
	PTSIZE PT >MAX
	DEC 'MAX
	SET 'I,0
?L9:	GETB PT,I >I?1
	FSET? I?1,BIT \?L14
	INC 'N
	SET 'W,I?1
?L14:	IGRTR? 'I,MAX \?L9
?L11:	EQUAL? N,1 \FALSE
	ZERO? WORD /?L20
	PRINTI "["
	PRINT WORD
	PRINTI " "
	CALL PRINT-DEF,W
	PRINTI "]"
	CRLF
?L20:	RETURN W

	.FUNCT ITALICIZE,STR,A
	PRINT STR
	RTRUE

	.FUNCT PICK-ONE,TABL,LENGTH,CNT,RND,S,MSG
	GET TABL,0 >LENGTH
	GET TABL,1 >CNT
?L1:	ADD CNT,S >STACK
	GET TABL,STACK >STACK
	PUT TEMPTABLE,S,STACK
	INC 'S
	ADD S,CNT >STACK
	GRTR? STACK,LENGTH \?L1
	RANDOM S >STACK
	SUB STACK,1 >RND
	GET TEMPTABLE,RND >MSG
	GET TABL,CNT >STACK
	ADD CNT,RND >STACK
	PUT TABL,STACK,STACK
	PUT TABL,CNT,MSG
	IGRTR? 'CNT,LENGTH \?L6
	SET 'CNT,2
?L6:	PUT TABL,1,CNT
	RETURN MSG

	.FUNCT PICK-ONE-R,TABL,MSG,RND
	GET TABL,0 >STACK
	RANDOM STACK >RND
	GET TABL,RND >MSG
	RETURN MSG

	.FUNCT UPDATE-STATUS-LINE,OHERE
	SET 'OHERE,HERE
	ZERO? HERE-LIT \?L3
	SET 'HERE,ROOMS
?L3:	USL
	SET 'HERE,OHERE
	RETURN HERE

	.FUNCT JIGS-UP,TEXT,RESP,W
	SET 'P-CONT,0
	PRINT TEXT
	CRLF
	CRLF
	CALL PRINT-GAME-OVER
	CRLF
?L1:	PRINTI "Would you like to RESTART, RESTORE or QUIT? > "
?L6:	CALL READLINE
	GETB LEXBUF,1 >STACK
	ZERO? STACK \?L9
	SET 'W,0
	JUMP ?L8
?L9:	GET LEXBUF,1 >W
?L8:	EQUAL? W,W?RESTART \?L10
	RESTART
?L10:	EQUAL? W,W?RESTORE \?L12
	RESTORE /?L13
?L13:	PRINTI "Restore failed."
	CRLF
	JUMP ?L1
?L12:	EQUAL? W,W?QUIT \?L14
	CRLF
	PRINTI "Thanks for playing."
	CRLF
	QUIT
?L14:	EQUAL? W,W?UNDO \?L15
	CALL V-UNDO
	PRINTI "Undo failed."
	CRLF
	JUMP ?L1
?L15:	CRLF
	PRINTI "(Please type RESTART, RESTORE or QUIT) > "
	PUSH 1
	JUMP ?L6

	.FUNCT PRINT-GAME-OVER
	PRINTR "    ****  The game is over  ****"

	.FUNCT ROB,VICTIM,DEST,DEST-IS-PERSON,I,N
	ZERO? DEST /?L1
	FSET? DEST,PERSONBIT \?L1
	SET 'DEST-IS-PERSON,1
?L1:	FIRST? VICTIM >I \TRUE
?L4:	NEXT? I >N /?L7
?L7:	ZERO? DEST-IS-PERSON \?L8
	FCLEAR I,WORNBIT
?L8:	ZERO? DEST \?L11
	REMOVE I
	JUMP ?L13
?L11:	MOVE I,DEST
?L13:	SET 'I,N
	ZERO? I \?L4
	RTRUE

	.FUNCT YES?,RESP
	PRINTI " (y/n) >"
?L1:	CALL READLINE
	GETB READBUF,1 >RESP
	EQUAL? RESP,89,121 /TRUE
	EQUAL? RESP,78,110 /FALSE
	PRINTI "(Please type y or n) >"
	PUSH 1
	JUMP ?L1

	.FUNCT VISIBLE?,OBJ,P,M
	EQUAL? OBJ,PSEUDO-OBJECT \?L1
	EQUAL? HERE,PSEUDO-LOC \FALSE
	RTRUE
?L1:	LOC OBJ >P
	ZERO? P /FALSE
	CALL META-LOC,OBJ >M
	EQUAL? M,HERE /?L15
	EQUAL? P,LOCAL-GLOBALS \?L14
	CALL GLOBAL-IN?,OBJ,HERE >STACK
	ZERO? STACK \TRUE
?L14:	EQUAL? P,GLOBAL-OBJECTS,GENERIC-OBJECTS \FALSE
	RTRUE
?L15:	EQUAL? P,HERE,WINNER /TRUE
	CALL SEE-INSIDE?,P >STACK
	ZERO? STACK /FALSE
	LOC P >P
	PUSH P
	JUMP ?L15

	.FUNCT ACCESSIBLE?,OBJ,L
	LOC OBJ >L
	CALL META-LOC,OBJ >STACK
	EQUAL? STACK,HERE \FALSE
?L1:	FSET? L,CONTBIT \?L6
	FSET? L,OPENBIT /?L6
	FSET? L,SURFACEBIT \FALSE
?L6:	EQUAL? L,HERE,WINNER /TRUE
	LOC L >L
	PUSH L
	JUMP ?L1

	.FUNCT HELD?,OBJ,HLDR=0
	ZERO? HLDR \?L1
	SET 'HLDR,WINNER
?L1:	ZERO? OBJ /FALSE
	LOC OBJ >STACK
	EQUAL? STACK,HLDR /TRUE
	LOC OBJ >OBJ
	PUSH OBJ
	JUMP ?L1

	.FUNCT META-LOC,OBJ
?L1:	LOC OBJ >OBJ
	ZERO? OBJ /FALSE
	IN? OBJ,ROOMS \?L5
	RETURN OBJ
?L5:	PUSH 0
	JUMP ?L1

	.FUNCT NOW-DARK?
	ZERO? HERE-LIT /FALSE
	CALL SEARCH-FOR-LIGHT >STACK
	ZERO? STACK \FALSE
	SET 'HERE-LIT,0
	CALL DARKNESS-F,M-NOW-DARK >STACK
	RSTACK

	.FUNCT NOW-LIT?,?TMP
	ZERO? HERE-LIT \FALSE
	CALL SEARCH-FOR-LIGHT >STACK
	ZERO? STACK /FALSE
	SET 'HERE-LIT,1
	FSET HERE,TOUCHBIT
	CALL DARKNESS-F,M-NOW-LIT >?TMP
	ZERO? ?TMP /?L4
	RETURN ?TMP
?L4:	CALL V-LOOK >STACK
	RSTACK

	.FUNCT QUEUE,IRTN,TURNZ
	ADD IQ-LENGTH,2 >IQ-LENGTH
	SUB IQ-LENGTH,1 >STACK
	PUT IQUEUE,STACK,IRTN
	PUT IQUEUE,IQ-LENGTH,TURNZ
	RTRUE

	.FUNCT DEQUEUE,IRTN,S
?L1:	ADD S,2 >S
	GRTR? S,IQ-LENGTH /TRUE
	SUB S,1 >STACK
	GET IQUEUE,STACK >STACK
	EQUAL? STACK,IRTN \?L5
	CALL DEL-EVENT,S
	CALL IQUEUE-CLEANUP
	RTRUE
?L5:	PUSH 0
	JUMP ?L1

	.FUNCT DEL-EVENT,IQPOS
	PUT IQUEUE,IQPOS,-9
	RTRUE

	.FUNCT IQUEUE-CLEANUP,S,Z
?L1:	ADD S,2 >S
	GRTR? S,IQ-LENGTH /TRUE
	GET IQUEUE,S >STACK
	EQUAL? STACK,-9 \?L5
	SET 'Z,S
?L6:	ADD Z,1 >STACK
	GET IQUEUE,STACK >STACK
	SUB Z,1 >STACK
	PUT IQUEUE,STACK,STACK
	ADD Z,2 >STACK
	GET IQUEUE,STACK >STACK
	PUT IQUEUE,Z,STACK
	EQUAL? Z,IQ-LENGTH \?L8
	SUB Z,1 >STACK
	PUT IQUEUE,STACK,0
	PUT IQUEUE,Z,0
	SUB IQ-LENGTH,2 >IQ-LENGTH
	SUB S,2 >S
	PUSH 1
	JUMP ?L1
?L8:	ADD Z,2 >Z
	PUSH Z
	JUMP ?L6
?L5:	PUSH 0
	JUMP ?L1

	.FUNCT RUNNING?,E,S
?L1:	ADD S,2 >S
	GRTR? S,IQ-LENGTH /FALSE
	SUB S,1 >STACK
	GET IQUEUE,STACK >STACK
	EQUAL? STACK,E \?L5
	GET IQUEUE,S >STACK
	EQUAL? STACK,1,-1 /TRUE
	PUSH 0
	JUMP ?L1
?L5:	PUSH 0
	JUMP ?L1

	.FUNCT CLOCKER,S,C,FIRED
	INC 'MOVES
?L1:	ADD S,2 >S
	GRTR? S,IQ-LENGTH \?L3
	EQUAL? C,1 \?L2
	CALL IQUEUE-CLEANUP
	RETURN FIRED
?L3:	GET IQUEUE,S >STACK
	EQUAL? STACK,-1 \?L9
	SUB S,1 >STACK
	GET IQUEUE,STACK >STACK
	CALL STACK >STACK
	BOR FIRED,STACK >FIRED
?L9:	GET IQUEUE,S >STACK
	GRTR? STACK,0 \?L1
	GET IQUEUE,S >STACK
	DEC 'STACK
	PUT IQUEUE,S,STACK
	GET IQUEUE,S >STACK
	ZERO? STACK \?L1
	SUB S,1 >STACK
	GET IQUEUE,STACK >STACK
	CALL STACK >STACK
	BOR FIRED,STACK >FIRED
	CALL DEL-EVENT,S
	SET 'C,1
	JUMP ?L1
?L2:	RETURN FIRED

	.FUNCT WAIT-TURNS,TURNS,T,INTERRUPT,ENDACT,BACKUP-WAIT
	SET 'BACKUP-WAIT,STANDARD-WAIT
	SET 'STANDARD-WAIT,TURNS
	SET 'T,1
?L1:	GETP HERE,P?ACTION >STACK
	CALL STACK,M-END >ENDACT
	CALL CLOCKER >INTERRUPT
	IGRTR? 'T,STANDARD-WAIT /?L5
	ZERO? ENDACT \?L5
	ZERO? INTERRUPT /?L3
?L5:	SET 'STANDARD-WAIT,BACKUP-WAIT
	RTRUE
?L3:	PUSH 0
	JUMP ?L1

	.FUNCT YOU-MASHER,WHOM
	PRINTI "I don't think "
	ZERO? WHOM /?L2
	PUSH WHOM
	JUMP ?L1
?L2:	PUSH PRSO
?L1:	CALL PRINT-DEF,STACK
	PRINTR " would appreciate that."

	.FUNCT POINTLESS,VING,PREP,REV?,F,S
	ZERO? REV? /?L1
	SET 'F,PRSI
	SET 'S,PRSO
	JUMP ?L3
?L1:	SET 'F,PRSO
	SET 'S,PRSI
?L3:	PRINT VING
	ZERO? F /?L8
	PRINTC 32
	CALL PRINT-DEF,F
	ZERO? PREP /?L8
	PRINTC 32
	PRINT PREP
	ZERO? S /?L8
	PRINTC 32
	CALL PRINT-DEF,S
?L8:	PRINTR " doesn't seem like it will help."

	.FUNCT NOT-POSSIBLE,V
	SET 'P-CONT,0
	PRINTI "That's not something you can "
	PRINT V
	PRINTR "."

	.FUNCT RHETORICAL
	PRINTR "That was a rhetorical question."

	.FUNCT BE-SPECIFIC
	SET 'P-CONT,0
	PRINTR "You'll have to be more specific."

	.FUNCT SILLY
	SET 'P-CONT,0
	PRINTR "You must be joking."

	.FUNCT TSD
	SET 'P-CONT,0
	PRINTR "Not here, not now."

	.FUNCT PRE-REQUIRES-LIGHT
	ZERO? HERE-LIT \FALSE
	SET 'P-CONT,0
	PRINTR "It's too dark to see anything here."

	.FUNCT V-LOOK
	CALL DESCRIBE-ROOM,HERE,1 >STACK
	ZERO? STACK /FALSE
	CALL DESCRIBE-OBJECTS,HERE >STACK
	RSTACK

	.FUNCT DESCRIBE-ROOM,RM,LONG,P
	EQUAL? RM,HERE \?L1
	ZERO? HERE-LIT \?L1
	CALL DARKNESS-F,M-LOOK
	RFALSE
?L1:	PRINTD RM
	CRLF
	ZERO? LONG \?L8
	EQUAL? MODE,SUPERBRIEF /FALSE
	FSET? RM,TOUCHBIT \?L8
	EQUAL? MODE,VERBOSE /?L8
	GETP RM,P?ACTION >STACK
	CALL STACK,M-FLASH >STACK
	RTRUE
?L8:	GETP RM,P?ACTION >STACK
	CALL STACK,M-LOOK >STACK
	ZERO? STACK \?L13
	GETP RM,P?LDESC >P
	ZERO? P /?L13
	PRINT P
	CRLF
?L13:	GETP RM,P?ACTION >STACK
	CALL STACK,M-FLASH >STACK
	FSET RM,TOUCHBIT
	RTRUE

	.FUNCT DARKNESS-F,ARG
	EQUAL? ARG,M-LOOK \?L1
	PRINTR "It is pitch black. You can't see a thing."
?L1:	EQUAL? ARG,M-SCOPE? \?L3
	GET SCOPE-CURRENT-STAGES,SCOPE-CURRENT-STAGE >STACK
	EQUAL? STACK,GENERIC-SCOPE-STAGE,INVENTORY-SCOPE-STAGE,GLOBALS-SCOPE-STAGE \FALSE
	RTRUE
?L3:	EQUAL? ARG,M-NOW-DARK \?L6
	PRINTR "You are plunged into darkness."
?L6:	EQUAL? ARG,M-NOW-LIT \FALSE
	PRINTI "You can see your surroundings now."
	CRLF
	CRLF
	RFALSE

	.FUNCT DESCRIBE-OBJECTS,RM,P,F,N,S,I
	FIRST? RM >I \?L16
?L1:	FSET? I,NDESCBIT /?L10
	GETP I,P?DESCFCN >P
	ZERO? P /?L6
	CRLF
	CALL P,M-OBJDESC >STACK
	CALL THIS-IS-IT,I
	JUMP ?L10
?L6:	FSET? I,TOUCHBIT /?L9
	GETP I,P?FDESC >P
	ZERO? P \?L8
?L9:	GETP I,P?LDESC >P
	ZERO? P /?L10
?L8:	CRLF
	PRINT P
	CRLF
	CALL THIS-IS-IT,I
	CALL SEE-INSIDE?,I >STACK
	ZERO? STACK /?L10
	FIRST? I >STACK \?L10
	CALL DESCRIBE-CONTENTS,I
?L10:	NEXT? I >I /?L1
	FIRST? RM >I \?L16
?L14:	CALL GENERIC-DESC?,I >STACK
	ZERO? STACK /?L17
	SET 'N,1
	JUMP ?L16
?L17:	NEXT? I >I /?L14
?L16:	ZERO? N /?L20
	CRLF
	PRINTI "There "
	CALL LIST-OBJECTS,RM,GENERIC-DESC?,L-ISMANY
	PRINTI " here."
	CRLF
	CALL CONTENTS-ARE-IT,RM,GENERIC-DESC?
?L20:	FIRST? RM >I \?L25
?L23:	CALL SEE-INSIDE?,I >STACK
	ZERO? STACK /?L26
	CALL GENERIC-DESC?,I >STACK
	ZERO? STACK /?L26
	FIRST? I >STACK \?L26
	CALL DESCRIBE-CONTENTS,I
?L26:	NEXT? I >I /?L23
?L25:	SET 'N,0
	FIRST? RM >I \?L31
?L29:	CALL NPC-DESC?,I >STACK
	ZERO? STACK /?L32
	SET 'N,1
	JUMP ?L31
?L32:	NEXT? I >I /?L29
?L31:	ZERO? N /FALSE
	CRLF
	CALL LIST-OBJECTS,RM,NPC-DESC?,66
	PRINTI " here."
	CRLF
	CALL CONTENTS-ARE-IT,RM,NPC-DESC? >STACK
	RSTACK

	.FUNCT GENERIC-DESC?,OBJ,P
	EQUAL? OBJ,WINNER /FALSE
	FSET? OBJ,NDESCBIT /FALSE
	FSET? OBJ,PERSONBIT /FALSE
	FSET? OBJ,TOUCHBIT /?L3
	GETP OBJ,P?FDESC >STACK
	ZERO? STACK \FALSE
?L3:	GETP OBJ,P?LDESC >STACK
	ZERO? STACK \FALSE
	GETP OBJ,P?DESCFCN >P
	ZERO? P /TRUE
	CALL P,M-OBJDESC? >STACK
	ZERO? STACK /TRUE
	RFALSE

	.FUNCT NPC-DESC?,OBJ,P
	FSET? OBJ,PERSONBIT \FALSE
	EQUAL? OBJ,WINNER /FALSE
	FSET? OBJ,NDESCBIT /FALSE
	FSET? OBJ,TOUCHBIT /?L3
	GETP OBJ,P?FDESC >STACK
	ZERO? STACK \FALSE
?L3:	GETP OBJ,P?LDESC >STACK
	ZERO? STACK \FALSE
	GETP OBJ,P?DESCFCN >P
	ZERO? P /TRUE
	CALL P,M-OBJDESC? >STACK
	ZERO? STACK /TRUE
	RFALSE

	.FUNCT PRINT-CAP-STR,S,MAX,C,I
	DIROUT 3,TEMPTABLE
	PRINT S
	DIROUT -3
	GET TEMPTABLE,0 >MAX
	ZERO? MAX /FALSE
	INC 'MAX
	SET 'I,2
?L3:	GETB TEMPTABLE,I >C
	EQUAL? I,2 \?L6
	LESS? C,97 /?L6
	GRTR? C,122 /?L6
	SUB C,32 >C
?L6:	PRINTC C
	IGRTR? 'I,MAX \?L3
	RTRUE

	.FUNCT PRINT-CAP-OBJ,OBJ,MAX,C,I
	DIROUT 3,TEMPTABLE
	PRINTD OBJ
	DIROUT -3
	GET TEMPTABLE,0 >MAX
	ZERO? MAX /FALSE
	INC 'MAX
	SET 'I,2
?L3:	GETB TEMPTABLE,I >C
	EQUAL? I,2 \?L6
	LESS? C,97 /?L6
	GRTR? C,122 /?L6
	SUB C,32 >C
?L6:	PRINTC C
	IGRTR? 'I,MAX \?L3
	RTRUE

	.FUNCT PRINT-INDEF,OBJ,A
	FSET? OBJ,NARTICLEBIT /?L6
	GETP OBJ,P?ARTICLE >A
	ZERO? A /?L3
	PRINT A
	PRINTC 32
	JUMP ?L6
?L3:	FSET? OBJ,PLURALBIT \?L4
	PRINTI "some "
	JUMP ?L6
?L4:	FSET? OBJ,VOWELBIT \?L5
	PRINTI "an "
	JUMP ?L6
?L5:	PRINTI "a "
?L6:	PRINTD OBJ
	RTRUE

	.FUNCT PRINT-DEF,OBJ
	FSET? OBJ,NARTICLEBIT /?L1
	PRINTI "the "
?L1:	PRINTD OBJ
	RTRUE

	.FUNCT PRINT-CINDEF,OBJ,A
	FSET? OBJ,NARTICLEBIT \?L1
	CALL PRINT-CAP-OBJ,OBJ
	RTRUE
?L1:	GETP OBJ,P?ARTICLE >A
	ZERO? A /?L4
	CALL PRINT-CAP-STR,A
	PRINTC 32
	JUMP ?L8
?L4:	FSET? OBJ,PLURALBIT \?L6
	PRINTI "Some "
	JUMP ?L8
?L6:	FSET? OBJ,VOWELBIT \?L7
	PRINTI "An "
	JUMP ?L8
?L7:	PRINTI "A "
?L8:	PRINTD OBJ
	RTRUE

	.FUNCT PRINT-CDEF,OBJ
	FSET? OBJ,NARTICLEBIT \?L1
	CALL PRINT-CAP-OBJ,OBJ
	RTRUE
?L1:	PRINTI "The "
	PRINTD OBJ
	RTRUE

	.FUNCT DESCRIBE-CONTENTS,OBJ
	FSET? OBJ,SURFACEBIT \?L1
	PRINTI "On"
	JUMP ?L3
?L1:	PRINTI "In"
?L3:	PRINTI " "
	CALL PRINT-DEF,OBJ
	PRINTI " "
	CALL LIST-OBJECTS,OBJ,0,L-ISARE
	PRINTI "."
	CRLF
	CALL CONTENTS-ARE-IT,OBJ >STACK
	RSTACK

	.FUNCT INV-DESCRIBE-CONTENTS,OBJ,N,F,I
	FSET? OBJ,SURFACEBIT \?L1
	PRINTI " (holding "
	JUMP ?L3
?L1:	PRINTI " (containing "
?L3:	FIRST? OBJ >F /?L5
	PRINTI "nothing)"
	RTRUE
?L5:	FIRST? OBJ >I \?L10
?L8:	INC 'N
	NEXT? I >I /?L8
?L10:	EQUAL? N,1 \?L11
	CALL PRINT-INDEF,F
	JUMP ?L18
?L11:	EQUAL? N,2 \?L13
	CALL PRINT-INDEF,F
	PRINTI " and "
	NEXT? F >STACK /?L14
?L14:	CALL PRINT-INDEF,STACK
	JUMP ?L18
?L13:	FIRST? OBJ >I \?L18
?L16:	CALL PRINT-INDEF,I
	DEC 'N
	ZERO? N /?L22
	EQUAL? N,1 \?L21
	PRINTI ", and "
	JUMP ?L22
?L21:	PRINTI ", "
?L22:	NEXT? I >I /?L16
?L18:	PRINTI ")"
	RTRUE

	.FUNCT LIST-OBJECTS,O,FILTER,FLAGS,N,F,S,MAX,J,I
	BTST FLAGS,L-CAP \?L1
	BOR FLAGS,L-SUFFIX >FLAGS
?L1:	BTST FLAGS,L-SUFFIX /?L6
	BTST FLAGS,L-ISMANY \?L4
?L6:	BOR FLAGS,L-ISARE >FLAGS
?L4:	BTST FLAGS,L-PRSTABLE \?L8
	GETB O,0 >MAX
	ZERO? MAX /?L27
	SET 'I,1
?L12:	GETB O,I >J
	ZERO? FILTER /?L17
	CALL FILTER,J >STACK
	ZERO? STACK /?L15
?L17:	ZERO? F \?L18
	SET 'F,J
	JUMP ?L20
?L18:	ZERO? S \?L20
	SET 'S,J
?L20:	INC 'N
?L15:	IGRTR? 'I,MAX \?L12
	JUMP ?L27
?L8:	FIRST? O >I \?L27
?L25:	ZERO? FILTER /?L30
	CALL FILTER,I >STACK
	ZERO? STACK /?L28
?L30:	ZERO? F \?L31
	SET 'F,I
	JUMP ?L33
?L31:	ZERO? S \?L33
	SET 'S,I
?L33:	INC 'N
?L28:	NEXT? I >I /?L25
?L27:	ZERO? N \?L36
	BTST FLAGS,L-CAP \?L38
	PRINTI "Nothing is"
	RETURN N
?L38:	BTST FLAGS,L-SUFFIX \?L40
	PRINTI "nothing is"
	RETURN N
?L40:	BTST FLAGS,L-ISARE \?L41
	PRINTI "is nothing"
	RETURN N
?L41:	PRINTI "nothing"
	RETURN N
?L36:	EQUAL? N,1 \?L43
	BTST FLAGS,L-CAP \?L44
	CALL LIST-OBJECTS-PRINT,F,FLAGS,1
	FSET? F,PLURALBIT \?L46
	PRINTI " are"
	RETURN N
?L46:	PRINTI " is"
	RETURN N
?L44:	BTST FLAGS,L-SUFFIX \?L49
	CALL LIST-OBJECTS-PRINT,F,FLAGS,0
	FSET? F,PLURALBIT \?L50
	PRINTI " are"
	RETURN N
?L50:	PRINTI " is"
	RETURN N
?L49:	BTST FLAGS,L-ISARE \?L58
	FSET? F,PLURALBIT \?L56
	PRINTI "are "
	JUMP ?L58
?L56:	PRINTI "is "
?L58:	CALL LIST-OBJECTS-PRINT,F,FLAGS,0
	RETURN N
?L43:	EQUAL? N,2 \?L59
	BTST FLAGS,L-ISARE \?L65
	BTST FLAGS,L-SUFFIX /?L65
	BTST FLAGS,L-ISMANY \?L64
	FSET? F,PLURALBIT \?L62
?L64:	PRINTI "are "
	JUMP ?L65
?L62:	PRINTI "is "
?L65:	BAND FLAGS,L-CAP >STACK
	CALL LIST-OBJECTS-PRINT,F,FLAGS,STACK
	BTST FLAGS,L-OR \?L67
	PRINTI " or "
	JUMP ?L69
?L67:	PRINTI " and "
?L69:	CALL LIST-OBJECTS-PRINT,S,FLAGS,0
	BTST FLAGS,L-SUFFIX \?L70
	PRINTI " are"
?L70:	RETURN N
?L59:	BTST FLAGS,L-ISARE \?L78
	BTST FLAGS,L-SUFFIX /?L78
	BTST FLAGS,L-ISMANY \?L77
	FSET? F,PLURALBIT \?L75
?L77:	PRINTI "are "
	JUMP ?L78
?L75:	PRINTI "is "
?L78:	BTST FLAGS,L-PRSTABLE \?L80
	SET 'I,1
?L82:	GETB O,I >J
	ZERO? FILTER /?L87
	CALL FILTER,J >STACK
	ZERO? STACK /?L97
?L87:	BTST FLAGS,L-CAP \?L88
	EQUAL? I,1 \?L88
	CALL LIST-OBJECTS-PRINT,J,FLAGS,1
	JUMP ?L90
?L88:	CALL LIST-OBJECTS-PRINT,J,FLAGS,0
?L90:	DEC 'N
	ZERO? N /?L97
	EQUAL? N,1 \?L93
	BTST FLAGS,L-OR \?L94
	PRINTI ", or "
	JUMP ?L97
?L94:	PRINTI ", and "
	JUMP ?L97
?L93:	PRINTI ", "
?L97:	IGRTR? 'I,MAX \?L82
	JUMP ?L102
?L80:	FIRST? O >I \?L102
?L100:	ZERO? FILTER /?L105
	CALL FILTER,I >STACK
	ZERO? STACK /?L115
?L105:	BTST FLAGS,L-CAP \?L106
	EQUAL? I,F \?L106
	CALL LIST-OBJECTS-PRINT,I,FLAGS,1
	JUMP ?L108
?L106:	CALL LIST-OBJECTS-PRINT,I,FLAGS,0
?L108:	DEC 'N
	ZERO? N /?L115
	EQUAL? N,1 \?L111
	BTST FLAGS,L-OR \?L112
	PRINTI ", or "
	JUMP ?L115
?L112:	PRINTI ", and "
	JUMP ?L115
?L111:	PRINTI ", "
?L115:	NEXT? I >I /?L100
?L102:	BTST FLAGS,L-SUFFIX \?L117
	PRINTI " are"
?L117:	RETURN N

	.FUNCT LIST-OBJECTS-PRINT,O,FLAGS,CAP?
	EQUAL? O,PSEUDO-OBJECT \?L1
	BTST FLAGS,L-SCENERY \?L1
	ZERO? CAP? /?L3
	PRINTC 83
	JUMP ?L5
?L3:	PRINTC 115
?L5:	PRINTI "ome scenery"
	EQUAL? PSEUDO-LOC,HERE /TRUE
	PRINTI " in "
	PRINTD PSEUDO-LOC
	RTRUE
?L1:	ZERO? CAP? /?L9
	BTST FLAGS,L-THE \?L10
	CALL PRINT-CDEF,O
	RTRUE
?L10:	CALL PRINT-CINDEF,O
	RTRUE
?L9:	BTST FLAGS,L-THE \?L14
	CALL PRINT-DEF,O
	RTRUE
?L14:	CALL PRINT-INDEF,O
	RTRUE

	.FUNCT V-WALK,PT,PTS,RM,THERE-LIT,D
	ZERO? PRSO-DIR \?L1
	PRINTR "You must give a direction to walk in."
?L1:	GETPT HERE,PRSO >PT
	ZERO? PT \?L3
	ZERO? HERE-LIT \?L6
	CALL DARKNESS-F,M-DARK-CANT-GO >STACK
	ZERO? STACK \?L4
?L6:	PRINT CANT-GO-THAT-WAY
	CRLF
?L4:	SET 'P-CONT,0
	RTRUE
?L3:	PTSIZE PT >PTS
	EQUAL? PTS,UEXIT \?L8
	GETB PT,EXIT-RM >RM
	JUMP ?L27
?L8:	EQUAL? PTS,NEXIT \?L9
	GET PT,NEXIT-MSG >STACK
	PRINT STACK
	CRLF
	SET 'P-CONT,0
	RTRUE
?L9:	EQUAL? PTS,FEXIT \?L10
	GET PT,FEXIT-RTN >STACK
	CALL STACK >RM
	ZERO? RM \?L27
	SET 'P-CONT,0
	RTRUE
?L10:	EQUAL? PTS,CEXIT \?L14
	GETB PT,CEXIT-VAR >STACK
	VALUE STACK >STACK
	ZERO? STACK /?L15
	GETB PT,EXIT-RM >RM
	JUMP ?L27
?L15:	GET PT,CEXIT-MSG >RM
	ZERO? RM /?L18
	PRINT RM
	CRLF
	JUMP ?L21
?L18:	ZERO? HERE-LIT \?L20
	CALL DARKNESS-F,M-DARK-CANT-GO >STACK
	ZERO? STACK \?L21
?L20:	PRINT CANT-GO-THAT-WAY
	CRLF
?L21:	SET 'P-CONT,0
	RTRUE
?L14:	EQUAL? PTS,DEXIT \?L22
	GETB PT,DEXIT-OBJ >D
	FSET? D,OPENBIT \?L23
	GETB PT,EXIT-RM >RM
	JUMP ?L27
?L23:	GET PT,DEXIT-MSG >RM
	ZERO? RM /?L25
	PRINT RM
	CRLF
	SET 'P-CONT,0
	RTRUE
?L25:	CALL THIS-IS-IT,D
	PRINTI "You'll have to open "
	CALL PRINT-DEF,D
	PRINTI " first."
	CRLF
	SET 'P-CONT,0
	RTRUE
?L22:	PRINTI "Broken exit ("
	PRINTN PTS
	PRINTI ")."
	CRLF
	SET 'P-CONT,0
	RTRUE
?L27:	CALL GOTO,RM >STACK
	RSTACK

	.FUNCT V-ENTER
	FSET? PRSO,DOORBIT \?L1
	CALL DOOR-DIR,PRSO >STACK
	CALL DO-WALK,STACK
	RTRUE
?L1:	CALL NOT-POSSIBLE,STR?3
	RTRUE

	.FUNCT DO-WALK,DIR,ODD,R,ORIG?PRSO-DIR,?RESULT
	SET 'ORIG?PRSO-DIR,PRSO-DIR
	SET 'PRSO-DIR,1
	CALL PERFORM,V?WALK,DIR >?RESULT
	SET 'PRSO-DIR,ORIG?PRSO-DIR
	RETURN ?RESULT

	.FUNCT DOOR-DIR,DOOR,D,PT
	SET 'D,32
?L1:	DLESS? 'D,P?DOWN /FALSE
	GETPT HERE,D >PT
	ZERO? PT /?L1
	PTSIZE PT >STACK
	EQUAL? STACK,DEXIT \?L1
	GETB PT,DEXIT-OBJ >STACK
	EQUAL? STACK,DOOR \?L1
	RETURN D

	.FUNCT OTHER-SIDE,DOOR,D
	CALL DOOR-DIR,DOOR >D
	ZERO? D /FALSE
	GETPT HERE,D >STACK
	GETB STACK,EXIT-RM >STACK
	RSTACK

	.FUNCT V-QUIT
	PRINTI "Are you sure you want to quit?"
	CALL YES? >STACK
	ZERO? STACK /?L1
	CRLF
	PRINTI "Thanks for playing."
	CRLF
	QUIT
?L1:	CRLF
	PRINTR "OK - not quitting."

	.FUNCT V-EXAMINE,P,N=0
	GETP PRSO,P?TEXT >P
	ZERO? P \?L3
	GETP PRSO,P?LDESC >P
	ZERO? P /?L1
?L3:	PRINT P
	CRLF
	SET 'N,1
?L1:	FSET? PRSO,OPENABLEBIT \?L5
	CALL PRINT-CDEF,PRSO
	PRINTI " is "
	FSET? PRSO,OPENBIT \?L7
	PRINTI "open."
	JUMP ?L9
?L7:	PRINTI "closed."
?L9:	CRLF
	SET 'N,1
?L5:	FIRST? PRSO >STACK \?L11
	CALL SEE-INSIDE?,PRSO >STACK
	ZERO? STACK /?L11
	CALL DESCRIBE-CONTENTS,PRSO
	SET 'N,1
?L11:	ZERO? N \FALSE
	PRINTI "You see nothing special about "
	CALL PRINT-DEF,PRSO
	PRINTR "."

	.FUNCT V-LOOK-UNDER
	EQUAL? PRSO,WINNER /?L1
	FSET? PRSO,PERSONBIT \?L1
	CALL YOU-MASHER
	RTRUE
?L1:	ZERO? HERE-LIT \?L3
	PRINTR "It's too dark."
?L3:	PRINTR "You can't see anything of interest."

	.FUNCT V-SEARCH
	EQUAL? PRSO,WINNER \?L1
	CALL PERFORM,V?INVENTORY >STACK
	RSTACK
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER >STACK
	RSTACK
?L3:	FSET? PRSO,CONTBIT /?L4
	CALL NOT-POSSIBLE,STR?4 >STACK
	RSTACK
?L4:	FSET? PRSO,OPENABLEBIT \?L5
	CALL SEE-INSIDE?,PRSO >STACK
	ZERO? STACK \?L5
	CALL PRINT-CDEF,PRSO
	FSET? PRSO,PLURALBIT \?L6
	PUSH STR?5
	JUMP ?L8
?L6:	PUSH STR?6
?L8:	PRINT STACK
	PRINTR " closed."
?L5:	FIRST? PRSO >STACK /?L9
	CALL PRINT-CDEF,PRSO
	FSET? PRSO,PLURALBIT \?L10
	PUSH STR?5
	JUMP ?L12
?L10:	PUSH STR?6
?L12:	PRINT STACK
	PRINTR " empty."
?L9:	CALL DESCRIBE-CONTENTS,PRSO >STACK
	RSTACK

	.FUNCT V-INVENTORY,I
	ZERO? HERE-LIT /?L1
	FIRST? WINNER >STACK \?L3
	PRINTI "You are carrying:"
	CRLF
	FIRST? WINNER >I \TRUE
?L5:	PRINTI "   "
	CALL PRINT-INDEF,I
	FSET? I,WORNBIT \?L8
	PRINTI " (worn)"
?L8:	FSET? I,LIGHTBIT \?L10
	PRINTI " (providing light)"
?L10:	FSET? I,CONTBIT \?L20
	FSET? I,OPENABLEBIT \?L18
	FSET? I,OPENBIT \?L16
	PRINTI " (open)"
	JUMP ?L18
?L16:	PRINTI " (closed)"
?L18:	CALL SEE-INSIDE?,I >STACK
	ZERO? STACK /?L20
	CALL INV-DESCRIBE-CONTENTS,I
?L20:	CRLF
	NEXT? I >I /?L5
	RTRUE
?L3:	PRINTR "You are empty-handed."
?L1:	PRINTR "It's too dark to see what you're carrying."

	.FUNCT V-TAKE
	CALL TRY-TAKE,PRSO
	RTRUE

	.FUNCT TRY-TAKE,OBJ,SILENT,HOLDER,S,X
	EQUAL? OBJ,WINNER \?L1
	ZERO? SILENT \FALSE
	EQUAL? P-V-WORD,W?GET \?L5
	PRINTI "Not quite."
	CRLF
	RFALSE
?L5:	EQUAL? P-V-WORD,W?TAKE,W?GRAB \?L6
	CALL TSD
	RFALSE
?L6:	EQUAL? P-V-WORD,W?PICK \?L7
	PRINTI "You aren't my type."
	CRLF
	RFALSE
?L7:	CALL SILLY
	RFALSE
?L1:	FSET? OBJ,PERSONBIT \?L9
	ZERO? SILENT \FALSE
	CALL YOU-MASHER
	RFALSE
?L9:	FSET? OBJ,TAKEBIT /?L12
	ZERO? SILENT \FALSE
	CALL NOT-POSSIBLE,STR?7
	RFALSE
?L12:	IN? OBJ,WINNER \?L15
	ZERO? SILENT \FALSE
	PRINTI "You already have that."
	CRLF
	RFALSE
?L15:	CALL TAKE-HOLDER,OBJ,WINNER >HOLDER
	ZERO? HOLDER /?L29
	FSET? HOLDER,PERSONBIT \?L21
	ZERO? SILENT \FALSE
	PRINTI "That seems to belong to "
	CALL PRINT-DEF,HOLDER
	PRINTI "."
	CRLF
	RFALSE
?L21:	CALL BLOCKS-TAKE?,HOLDER >STACK
	ZERO? STACK /?L25
	CALL THIS-IS-IT,HOLDER
	ZERO? SILENT \FALSE
	CALL PRINT-CDEF,HOLDER
	PRINTI " is in the way."
	CRLF
	RFALSE
?L25:	CALL TAKE-CAPACITY-CHECK,OBJ >STACK
	ZERO? STACK /?L29
	FSET? HOLDER,CONTBIT \?L29
	CALL HELD?,OBJ,HOLDER >STACK
	ZERO? STACK /?L29
	CALL HELD?,WINNER,HOLDER >STACK
	ZERO? STACK \?L29
	FSET OBJ,TOUCHBIT
	MOVE OBJ,WINNER
	ZERO? SILENT \FALSE
	EQUAL? REPORT-MODE,SHORT-REPORT \?L32
	PRINTI "Taken."
	CRLF
	RFALSE
?L32:	PRINTI "You reach "
	CALL HELD?,WINNER,HOLDER >STACK
	ZERO? STACK /?L34
	PRINTI "out of "
	JUMP ?L36
?L34:	PRINTI "in "
?L36:	CALL PRINT-DEF,HOLDER
	PRINTI " and "
	FSET? OBJ,WEARBIT \?L37
	PRINTI "wear "
	FSET OBJ,WORNBIT
	JUMP ?L39
?L37:	PRINTI "take "
?L39:	CALL PRINT-DEF,OBJ
	PRINTI "."
	CRLF
	RFALSE
?L29:	CALL TAKE-CAPACITY-CHECK,OBJ,SILENT >STACK
	ZERO? STACK /FALSE
	FSET? OBJ,WEARBIT \?L44
	FSET OBJ,WORNBIT
	MOVE OBJ,WINNER
	FSET OBJ,TOUCHBIT
	ZERO? SILENT \TRUE
	EQUAL? REPORT-MODE,SHORT-REPORT \?L47
	PRINTR "Taken (and worn)."
?L47:	PRINTI "You wear "
	CALL PRINT-DEF,OBJ
	PRINTR "."
?L44:	FSET OBJ,TOUCHBIT
	MOVE OBJ,WINNER
	ZERO? SILENT \TRUE
	EQUAL? REPORT-MODE,SHORT-REPORT \?L52
	PRINTR "Taken."
?L52:	PRINTI "You pick up "
	CALL PRINT-DEF,OBJ
	PRINTR "."

	.FUNCT TAKE-HOLDER,OBJ,TAKER,CEIL,BLOCKER,ALLOWER,HAD-ALLOWER?,L
	CALL COMMON-PARENT-R,OBJ,TAKER,HERE >CEIL
	ZERO? CEIL \?L1
	RETURN ROOMS
?L1:	EQUAL? OBJ,CEIL /?L8
	LOC OBJ >L
?L6:	EQUAL? L,0,CEIL /?L8
	CALL BLOCKS-TAKE?,L >STACK
	ZERO? STACK /?L11
	SET 'BLOCKER,L
	JUMP ?L15
?L11:	FSET? L,CONTBIT \?L14
	FSET? L,SURFACEBIT \?L13
?L14:	IN? L,ROOMS \?L15
?L13:	ZERO? ALLOWER \?L15
	SET 'ALLOWER,L
?L15:	LOC L >L
	JUMP ?L6
?L8:	SET 'HAD-ALLOWER?,ALLOWER
	EQUAL? TAKER,CEIL /?L23
	LOC TAKER >L
?L21:	EQUAL? L,0,CEIL /?L23
	CALL BLOCKS-TAKE?,L >STACK
	ZERO? STACK /?L26
	ZERO? BLOCKER \?L32
	SET 'BLOCKER,L
	JUMP ?L32
?L26:	FSET? L,CONTBIT \?L31
	FSET? L,SURFACEBIT \?L30
?L31:	IN? L,ROOMS \?L32
?L30:	ZERO? HAD-ALLOWER? \?L32
	SET 'ALLOWER,L
?L32:	LOC L >L
	JUMP ?L21
?L23:	ZERO? BLOCKER /?L37
	RETURN BLOCKER
?L37:	RETURN ALLOWER

	.FUNCT BLOCKS-TAKE?,OBJ
	FSET? OBJ,PERSONBIT /TRUE
	FSET? OBJ,CONTBIT \FALSE
	FSET? OBJ,OPENABLEBIT \FALSE
	FSET? OBJ,OPENBIT \TRUE
	RFALSE

	.FUNCT COMMON-PARENT-R,A,B,ROOT,N,F,R,I
	ZERO? ROOT /FALSE
	EQUAL? ROOT,A,B \?L3
	RETURN ROOT
?L3:	FIRST? ROOT >I \?L8
?L6:	CALL COMMON-PARENT-R,A,B,I >R
	ZERO? R /?L11
	SET 'F,R
	IGRTR? 'N,1 \?L11
	RETURN ROOT
?L11:	NEXT? I >I /?L6
?L8:	RETURN F

	.FUNCT TAKE-CAPACITY-CHECK,O,SILENT,CAP,CWT,NWT,?TMP
	GETP WINNER,P?CAPACITY >CAP
	LESS? CAP,0 /TRUE
	CALL WEIGHT,WINNER >?TMP
	GETP WINNER,P?SIZE >STACK
	SUB ?TMP,STACK >CWT
	CALL WEIGHT,O >NWT
	ADD CWT,NWT >STACK
	GRTR? STACK,CAP \TRUE
	ZERO? SILENT \FALSE
	EQUAL? REPORT-MODE,SHORT-REPORT \?L8
	PRINTI "You're carrying too much."
	CRLF
	RFALSE
?L8:	PRINTI "You're carrying too much to pick up "
	CALL PRINT-DEF,O
	PRINTI "."
	CRLF
	RFALSE

	.FUNCT PRE-DROP
	IN? PRSO,WINNER /FALSE
	SET 'P-CONT,0
	PRINTR "You don't have that."

	.FUNCT V-DROP
	MOVE PRSO,HERE
	FSET PRSO,TOUCHBIT
	FCLEAR PRSO,WORNBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L1
	PRINTR "Dropped."
?L1:	PRINTI "You drop "
	CALL PRINT-DEF,PRSO
	PRINTR "."

	.FUNCT PRE-PUT-ON
	EQUAL? PRSI,WINNER \?L1
	CALL PERFORM,V?WEAR,PRSO
	RTRUE
?L1:	EQUAL? PRSO,WINNER \?L3
	CALL PERFORM,V?ENTER,PRSI
	RTRUE
?L3:	CALL HAVE-TAKE-CHECK,PRSO,SF-HAVE >STACK
	ZERO? STACK /TRUE
	RFALSE

	.FUNCT V-PUT-ON,S,CCAP,CSIZE,X,W,B
	FSET? PRSI,PERSONBIT \?L1
	CALL YOU-MASHER,PRSI
	RTRUE
?L1:	FSET? PRSI,CONTBIT \?L4
	FSET? PRSI,SURFACEBIT /?L3
?L4:	CALL NOT-POSSIBLE,STR?8
	RTRUE
?L3:	IN? PRSO,WINNER /?L5
	PRINTR "You don't have that."
?L5:	EQUAL? PRSO,PRSI /?L7
	CALL HELD?,PRSI,PRSO >STACK
	ZERO? STACK /?L6
?L7:	PRINTR "You can't put something on itself."
?L6:	GETP PRSO,P?SIZE >S
	GETP PRSI,P?CAPACITY >CCAP
	LESS? CCAP,0 \?L11
	SET 'CCAP,5
	SET 'B,1
?L11:	GETP PRSI,P?SIZE >CSIZE
	GRTR? S,CCAP /?L14
	GRTR? S,CSIZE \?L12
?L14:	PRINTI "That won't fit on "
	CALL PRINT-DEF,PRSI
	PRINTR "."
?L12:	ZERO? B \?L18
	CALL CONTENTS-WEIGHT,PRSI >W
	ADD W,S >X
	GRTR? X,CCAP \?L18
	PRINTI "There's not enough room on "
	CALL PRINT-DEF,PRSI
	PRINTR "."
?L18:	MOVE PRSO,PRSI
	FSET PRSO,TOUCHBIT
	FCLEAR PRSO,WORNBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L22
	PRINTR "Done."
?L22:	PRINTI "You put "
	CALL PRINT-DEF,PRSO
	PRINTI " on "
	CALL PRINT-DEF,PRSI
	PRINTR "."

	.FUNCT PRE-PUT-IN
	EQUAL? PRSI,WINNER \?L1
	CALL TSD
	RTRUE
?L1:	EQUAL? PRSO,WINNER \?L3
	CALL PERFORM,V?ENTER,PRSI
	RTRUE
?L3:	CALL HAVE-TAKE-CHECK,PRSO,SF-HAVE >STACK
	ZERO? STACK /TRUE
	RFALSE

	.FUNCT V-PUT-IN,S,CCAP,CSIZE,X,W,B
	FSET? PRSI,PERSONBIT \?L1
	CALL YOU-MASHER,PRSI
	RTRUE
?L1:	FSET? PRSI,CONTBIT \?L4
	FSET? PRSI,SURFACEBIT \?L3
?L4:	CALL NOT-POSSIBLE,STR?9
	RTRUE
?L3:	FSET? PRSI,OPENBIT /?L6
	FSET? PRSI,OPENABLEBIT \?L5
	CALL PRINT-CDEF,PRSI
	PRINTR " is closed."
?L5:	FSET? PRSI,OPENBIT /?L6
	FSET? PRSI,CONTBIT \?L6
	PRINTI "You see no way to put things into "
	CALL PRINT-DEF,PRSI
	PRINTR "."
?L6:	IN? PRSO,WINNER /?L7
	PRINTR "You aren't holding that."
?L7:	EQUAL? PRSO,PRSI /?L9
	CALL HELD?,PRSI,PRSO >STACK
	ZERO? STACK /?L8
?L9:	PRINTR "You can't put something in itself."
?L8:	GETP PRSO,P?SIZE >S
	GETP PRSI,P?CAPACITY >CCAP
	LESS? CCAP,0 \?L13
	SET 'CCAP,5
	SET 'B,1
?L13:	GETP PRSI,P?SIZE >CSIZE
	GRTR? S,CCAP /?L16
	GRTR? S,CSIZE \?L14
?L16:	PRINTI "That won't fit in "
	CALL PRINT-DEF,PRSI
	PRINTR "."
?L14:	ZERO? B \?L20
	CALL CONTENTS-WEIGHT,PRSI >W
	ADD W,S >X
	GRTR? X,CCAP \?L20
	PRINTI "There's not enough room in "
	CALL PRINT-DEF,PRSI
	PRINTR "."
?L20:	MOVE PRSO,PRSI
	FSET PRSO,TOUCHBIT
	FCLEAR PRSO,WORNBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L24
	PRINTR "Done."
?L24:	PRINTI "You put "
	CALL PRINT-DEF,PRSO
	PRINTI " in "
	CALL PRINT-DEF,PRSI
	PRINTR "."

	.FUNCT CONTENTS-WEIGHT,O,X,W,I
	FIRST? O >I \?L3
?L1:	GETP I,P?SIZE >STACK
	ADD W,STACK >W
	NEXT? I >I /?L1
?L3:	RETURN W

	.FUNCT WEIGHT,O,X,W,I
	GETP O,P?SIZE >W
	FIRST? O >I \?L3
?L1:	FSET? I,CONTBIT /?L6
	FSET? I,PERSONBIT \?L4
?L6:	CALL WEIGHT,I >X
	ADD W,X >W
	JUMP ?L7
?L4:	GETP I,P?SIZE >STACK
	ADD W,STACK >W
?L7:	NEXT? I >I /?L1
?L3:	RETURN W

	.FUNCT V-WEAR
	FSET? PRSO,WEARBIT \?L1
	CALL PERFORM,V?TAKE,PRSO
	RTRUE
?L1:	CALL NOT-POSSIBLE,STR?10
	RTRUE

	.FUNCT V-UNWEAR
	FSET? PRSO,WORNBIT \?L1
	IN? PRSO,WINNER \?L1
	CALL PERFORM,V?DROP,PRSO >STACK
	RSTACK
?L1:	PRINTR "You aren't wearing that."

	.FUNCT V-EAT
	EQUAL? PRSO,WINNER \?L1
	CALL TSD
	RTRUE
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER
	RTRUE
?L3:	FSET? PRSO,EDIBLEBIT \?L4
	REMOVE PRSO
	EQUAL? REPORT-MODE,SHORT-REPORT \?L5
	PRINTR "Eaten."
?L5:	PRINTI "You devour "
	CALL PRINT-DEF,PRSO
	PRINTR "."
?L4:	PRINTR "That's hardly edible."

	.FUNCT V-VERSION,?TMP
	PRINT GAME-BANNER
	PRINTI "
Release "
	GET 0,1 >STACK
	BAND STACK,2047 >STACK
	PRINTN STACK
	PRINTI " / Serial number "
	SET '?TMP,18
?L1:	GETB 0,?TMP >STACK
	PRINTC STACK
	IGRTR? '?TMP,23 \?L1
	PRINTR " / ZILF 0.8 lib J4"

	.FUNCT V-THINK-ABOUT
	EQUAL? PRSO,WINNER \?L1
	PRINTR "Yes, yes, you're very important."
?L1:	PRINTI "You contemplate "
	CALL PRINT-DEF,PRSO
	PRINTR " for a bit, but nothing fruitful comes to mind."

	.FUNCT V-OPEN
	FSET? PRSO,PERSONBIT \?L1
	CALL YOU-MASHER
	RTRUE
?L1:	FSET? PRSO,OPENABLEBIT /?L3
	CALL NOT-POSSIBLE,STR?11
	RTRUE
?L3:	FSET? PRSO,OPENBIT \?L4
	PRINTR "It's already open."
?L4:	FSET? PRSO,LOCKEDBIT \?L5
	PRINTR "You'll have to unlock it first."
?L5:	FSET PRSO,TOUCHBIT
	FSET PRSO,OPENBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L7
	PRINTI "Opened."
	CRLF
	JUMP ?L10
?L7:	PRINTI "You open "
	CALL PRINT-DEF,PRSO
	PRINTI "."
	CRLF
	ZERO? HERE-LIT /?L10
	FSET? PRSO,CONTBIT \?L10
	FSET? PRSO,TRANSBIT /?L10
	CALL DESCRIBE-CONTENTS,PRSO
?L10:	CALL NOW-LIT? >STACK
	RSTACK

	.FUNCT V-CLOSE
	FSET? PRSO,PERSONBIT \?L1
	CALL YOU-MASHER
	RTRUE
?L1:	FSET? PRSO,OPENABLEBIT /?L3
	CALL NOT-POSSIBLE,STR?12
	RTRUE
?L3:	FSET? PRSO,OPENBIT /?L4
	PRINTR "It's already closed."
?L4:	FSET PRSO,TOUCHBIT
	FCLEAR PRSO,OPENBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L6
	PRINTI "Closed."
	CRLF
	JUMP ?L8
?L6:	PRINTI "You close "
	CALL PRINT-DEF,PRSO
	PRINTI "."
	CRLF
?L8:	CALL NOW-DARK? >STACK
	RSTACK

	.FUNCT V-LOCK
	CALL NOT-POSSIBLE,STR?13
	RTRUE

	.FUNCT V-UNLOCK
	CALL NOT-POSSIBLE,STR?14
	RTRUE

	.FUNCT V-WAIT,T,INTERRUPT,ENDACT
	SET 'T,1
	PRINTI "Time passes."
	CRLF
?L1:	GETP HERE,P?ACTION >STACK
	CALL STACK,M-END >ENDACT
	CALL CLOCKER >INTERRUPT
	IGRTR? 'T,STANDARD-WAIT /TRUE
	ZERO? ENDACT \TRUE
	ZERO? INTERRUPT \TRUE
	PUSH 0
	JUMP ?L1

	.FUNCT V-AGAIN,RESULT
	CALL SAVE-PARSER-RESULT,TEMP-PARSER-RESULT
	CALL RESTORE-PARSER-RESULT,AGAIN-STORAGE
	ZERO? PRSA /?L1
	ZERO? PRSO /?L3
	ZERO? PRSO-DIR \?L3
	CALL STILL-VISIBLE-CHECK,P-PRSOS >STACK
	ZERO? STACK /?L5
	GETB P-SYNTAX,SYN-OPTS1 >STACK
	CALL HAVE-TAKE-CHECK-TBL,P-PRSOS,STACK >STACK
	ZERO? STACK \?L3
?L5:	CALL RESTORE-PARSER-RESULT,TEMP-PARSER-RESULT
	RTRUE
?L3:	ZERO? PRSI /?L6
	CALL STILL-VISIBLE-CHECK,P-PRSIS >STACK
	ZERO? STACK /?L7
	GETB P-SYNTAX,SYN-OPTS2 >STACK
	CALL HAVE-TAKE-CHECK-TBL,P-PRSIS,STACK >STACK
	ZERO? STACK \?L6
?L7:	CALL RESTORE-PARSER-RESULT,TEMP-PARSER-RESULT
	RTRUE
?L6:	CALL PERFORM,PRSA,PRSO,PRSI >RESULT
	EQUAL? PRSA,V?QUIT,V?VERSION,V?WAIT /?L9
	EQUAL? PRSA,V?SAVE,V?RESTORE,V?INVENTORY /?L9
	EQUAL? PRSA,V?UNDO,V?SUPERBRIEF,V?BRIEF /?L9
	EQUAL? PRSA,V?VERBOSE,V?AGAIN,V?SCRIPT /?L9
	EQUAL? PRSA,V?UNSCRIPT,V?PRONOUNS,V?TELL /?L9
	GETP HERE,P?ACTION >STACK
	CALL STACK,M-END >RESULT
	CALL CLOCKER >RESULT
?L9:	LOC WINNER >HERE
	JUMP ?L12
?L1:	PRINTI "Nothing to repeat."
	CRLF
?L12:	CALL RESTORE-PARSER-RESULT,TEMP-PARSER-RESULT
	RTRUE

	.FUNCT V-READ,T
	FSET? PRSO,READBIT /?L1
	CALL NOT-POSSIBLE,STR?15
	RTRUE
?L1:	GETP PRSO,P?TEXT >T
	ZERO? T /?L3
	PRINT T
	CRLF
	RTRUE
?L3:	GETP PRSO,P?TEXT-HELD >T
	ZERO? T /?L4
	IN? PRSO,WINNER \?L5
	PRINT T
	CRLF
	RTRUE
?L5:	PRINTR "You must be holding that to be able to read it."
?L4:	CALL PERFORM,V?EXAMINE,PRSO >STACK
	RSTACK

	.FUNCT V-TURN-ON
	EQUAL? PRSO,WINNER \?L1
	CALL TSD
	RTRUE
?L1:	FSET? PRSO,DEVICEBIT /?L3
	CALL NOT-POSSIBLE,STR?16
	RTRUE
?L3:	FSET? PRSO,ONBIT \?L4
	PRINTR "It's already on."
?L4:	FSET PRSO,ONBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L6
	PRINTR "Switched on."
?L6:	PRINTI "You switch on "
	CALL PRINT-DEF,PRSO
	PRINTR "."

	.FUNCT V-TURN-OFF
	EQUAL? PRSO,WINNER \?L1
	CALL PICK-ONE-R,T?100 >STACK
	PRINT STACK
	CRLF
	RTRUE
?L1:	FSET? PRSO,DEVICEBIT /?L3
	CALL NOT-POSSIBLE,STR?16
	RTRUE
?L3:	FSET? PRSO,ONBIT /?L4
	PRINTR "It's already off."
?L4:	FCLEAR PRSO,ONBIT
	EQUAL? REPORT-MODE,SHORT-REPORT \?L6
	PRINTR "Switched off."
?L6:	PRINTI "You switch off "
	CALL PRINT-DEF,PRSO
	PRINTR "."

	.FUNCT V-FLIP
	FSET? PRSO,DEVICEBIT /?L1
	FSET? PRSO,SURFACEBIT \?L3
	CALL POINTLESS,STR?17
	RTRUE
?L3:	CALL NOT-POSSIBLE,STR?16
	RTRUE
?L1:	FSET? PRSO,ONBIT \?L6
	CALL PERFORM,V?TURN-OFF,PRSO
	RTRUE
?L6:	CALL PERFORM,V?TURN-ON,PRSO
	RTRUE

	.FUNCT V-PUSH
	EQUAL? PRSO,WINNER \?L1
	PRINTR "No, you seem close to the edge."
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER
	RTRUE
?L3:	CALL POINTLESS,STR?18
	RTRUE

	.FUNCT V-PULL
	EQUAL? PRSO,WINNER \?L1
	PRINTR "That would demean both of us."
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER
	RTRUE
?L3:	CALL POINTLESS,STR?19
	RTRUE

	.FUNCT V-YES
	CALL RHETORICAL
	RTRUE

	.FUNCT V-NO
	CALL RHETORICAL
	RTRUE

	.FUNCT V-DRINK
	PRINTI "You aren't "
	CALL ITALICIZE,STR?20
	PRINTR " thirsty."

	.FUNCT V-FILL
	CALL BE-SPECIFIC
	RTRUE

	.FUNCT V-EMPTY
	CALL BE-SPECIFIC
	RTRUE

	.FUNCT V-SMELL
	PRINTR "You smell nothing unexpected."

	.FUNCT V-ATTACK
	EQUAL? PRSO,WINNER \?L1
	PRINTR "Let's hope it doesn't come to that."
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER
	RTRUE
?L3:	CALL POINTLESS,STR?17
	RTRUE

	.FUNCT V-THROW-AT
	EQUAL? PRSO,WINNER \?L1
	PRINTI "Get "
	FSET? PRSO,PLURALBIT \?L3
	PUSH STR?21
	JUMP ?L5
?L3:	PUSH STR?22
?L5:	PRINT STACK
	PRINTR " yourself."
?L1:	FSET? PRSI,PERSONBIT \?L6
	CALL YOU-MASHER,PRSI
	RTRUE
?L6:	CALL POINTLESS,STR?17,0,1
	RTRUE

	.FUNCT V-GIVE
	EQUAL? PRSI,WINNER \?L1
	CALL HELD?,PRSO >STACK
	ZERO? STACK /?L3
	PRINTR "You already have that."
?L3:	PRINTI "Get "
	FSET? PRSO,PLURALBIT \?L6
	PUSH STR?21
	JUMP ?L8
?L6:	PUSH STR?22
?L8:	PRINT STACK
	PRINTR " yourself."
?L1:	EQUAL? PRSO,WINNER \?L9
	CALL SILLY >STACK
	RSTACK
?L9:	FSET? PRSO,PERSONBIT \?L10
	CALL YOU-MASHER >STACK
	RSTACK
?L10:	FSET? PRSI,PERSONBIT /?L11
	CALL NOT-POSSIBLE,STR?23 >STACK
	RSTACK
?L11:	CALL PRINT-CDEF,PRSI
	FSET? PRSI,PLURALBIT \?L13
	PUSH STR?24
	JUMP ?L15
?L13:	PUSH STR?25
?L15:	PRINT STACK
	PRINTI " take "
	CALL PRINT-DEF,PRSO
	PRINTR "."

	.FUNCT V-SGIVE
	CALL PERFORM,V?GIVE,PRSI,PRSO
	RTRUE

	.FUNCT PRE-TELL
	EQUAL? PRSO,WINNER /?L3
	FSET? PRSO,PERSONBIT /FALSE
?L3:	SET 'P-CONT,0
	PRINTI "Talking to "
	EQUAL? PRSO,WINNER \?L4
	PRINTI "yourself"
	JUMP ?L6
?L4:	CALL PRINT-INDEF,PRSO
?L6:	PRINTR ", huh?"

	.FUNCT V-TELL-ABOUT
	CALL PRINT-CDEF,PRSO
	PRINTR " doesn't seem interested."

	.FUNCT V-TELL
	SET 'WINNER,PRSO
	RTRUE

	.FUNCT V-WAVE-HANDS
	CALL POINTLESS,STR?26
	RTRUE

	.FUNCT V-WAVE
	CALL SILLY
	RTRUE

	.FUNCT V-CLIMB
	ZERO? PRSO /?L1
	CALL NOT-POSSIBLE,STR?27
	RTRUE
?L1:	CALL SILLY
	RTRUE

	.FUNCT V-SWIM
	CALL SILLY
	RTRUE

	.FUNCT V-JUMP
	CALL POINTLESS,STR?28
	RTRUE

	.FUNCT V-SING
	PRINTR "You give a stirring performance of ""MacArthur Park"". Bravo!"

	.FUNCT V-DANCE
	PRINTR "Dancing is forbidden."

	.FUNCT V-WAKE
	EQUAL? PRSO,WINNER \?L1
	PRINTR "If only this were a dream."
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER >STACK
	RSTACK
?L3:	CALL NOT-POSSIBLE,STR?29 >STACK
	RSTACK

	.FUNCT V-RUB
	EQUAL? PRSO,WINNER \?L1
	CALL TSD >STACK
	RSTACK
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER >STACK
	RSTACK
?L3:	CALL POINTLESS,STR?30 >STACK
	RSTACK

	.FUNCT V-BURN
	EQUAL? PRSO,WINNER \?L1
	PRINTR "What is this, the Friars Club?"
?L1:	FSET? PRSO,PERSONBIT \?L3
	CALL YOU-MASHER >STACK
	RSTACK
?L3:	CALL POINTLESS,STR?31 >STACK
	RSTACK

	.FUNCT V-UNDO,R
	PRINTR "Undo is not available in this version."

	.FUNCT V-SAVE,S
	PRINTI "Saving..."
	CRLF
	CRLF
	SAVE \?L1
	CALL V-LOOK >STACK
	RSTACK
?L1:	PRINTR "Save failed."

	.FUNCT V-RESTORE,R
	RESTORE /FALSE
	PRINTR "Restore failed."

	.FUNCT V-RESTART
	PRINTI "Are you sure you want to restart?"
	CALL YES? >STACK
	ZERO? STACK /?L1
	RESTART
?L1:	PRINTR "Restart aborted."

	.FUNCT V-BRIEF
	PRINTI "Brief descriptions."
	CRLF
	SET 'MODE,BRIEF
	RETURN MODE

	.FUNCT V-VERBOSE
	PRINTI "Verbose descriptions."
	CRLF
	CRLF
	SET 'MODE,VERBOSE
	CALL V-LOOK >STACK
	RSTACK

	.FUNCT V-SUPERBRIEF
	PRINTI "Superbrief descriptions."
	CRLF
	SET 'MODE,SUPERBRIEF
	RETURN MODE

	.FUNCT V-SCRIPT
	GET 0,8 >STACK
	BTST STACK,1 \?L1
	PRINTR "Transcript already on."
?L1:	DIROUT 2
	GET 0,8 >STACK
	BTST STACK,1 \?L3
	PRINTI "This begins a transcript of "
	CALL V-VERSION
	RTRUE
?L3:	PRINTR "Failed."

	.FUNCT V-UNSCRIPT
	GET 0,8 >STACK
	BTST STACK,1 /?L1
	PRINTR "Transcript already off."
?L1:	CRLF
	PRINTI "End of transcript."
	CRLF
	DIROUT -2
	GET 0,8 >STACK
	BTST STACK,1 \FALSE
	PRINTR "Failed."

	.FUNCT PLAYER-F
	EQUAL? PLAYER,PRSO \FALSE
	EQUAL? PRSA,V?EXAMINE \FALSE
	PRINTR "You look like you're up for an adventure."

	.FUNCT MAILBOX-F
	PRINTI "Opening the mailbox reveals a leaflet"
	CRLF
	PRINTI "Inside it contains:"
	CRLF
	CALL LIST-OBJECTS,PRSO,PRSI
	RTRUE

	.FUNCT LEAFLET-F
	PRINTR "READ The leaflet says: 'WELCOME TO ZIL!'."

	.INSERT "zork_str"
	.END
